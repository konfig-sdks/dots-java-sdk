/*
 * dots api
 * Scalable and Flexible Payouts Infrastructure
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@dots.dev
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CheckoutSession;
import com.konfigthis.client.model.CheckoutsessionsCreateSessionRequest;
import com.konfigthis.client.model.CheckoutsessionsCreateSessionRequestLineItemsInner;
import com.konfigthis.client.model.CheckoutsessionsListAllResponse;
import java.net.URI;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CheckoutSessionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CheckoutSessionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CheckoutSessionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createSessionCall(CheckoutsessionsCreateSessionRequest checkoutsessionsCreateSessionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkoutsessionsCreateSessionRequest;

        // create path and map variables
        String localVarPath = "/v2/checkout-sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSessionValidateBeforeCall(CheckoutsessionsCreateSessionRequest checkoutsessionsCreateSessionRequest, final ApiCallback _callback) throws ApiException {
        return createSessionCall(checkoutsessionsCreateSessionRequest, _callback);

    }


    private ApiResponse<CheckoutSession> createSessionWithHttpInfo(CheckoutsessionsCreateSessionRequest checkoutsessionsCreateSessionRequest) throws ApiException {
        okhttp3.Call localVarCall = createSessionValidateBeforeCall(checkoutsessionsCreateSessionRequest, null);
        Type localVarReturnType = new TypeToken<CheckoutSession>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSessionAsync(CheckoutsessionsCreateSessionRequest checkoutsessionsCreateSessionRequest, final ApiCallback<CheckoutSession> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSessionValidateBeforeCall(checkoutsessionsCreateSessionRequest, _callback);
        Type localVarReturnType = new TypeToken<CheckoutSession>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSessionRequestBuilder {
        private final Set<CheckoutsessionsCreateSessionRequestLineItemsInner> lineItems;
        private final URI successUrl;
        private final String mode;
        private String customerEmail;
        private String clientReferenceId;
        private URI cancelUrl;
        private UUID userId;
        private UUID customerId;
        private Integer expiresIn;
        private Object metadata;

        private CreateSessionRequestBuilder(Set<CheckoutsessionsCreateSessionRequestLineItemsInner> lineItems, URI successUrl, String mode) {
            this.lineItems = lineItems;
            this.successUrl = successUrl;
            this.mode = mode;
        }

        /**
         * Set customerEmail
         * @param customerEmail  (optional)
         * @return CreateSessionRequestBuilder
         */
        public CreateSessionRequestBuilder customerEmail(String customerEmail) {
            this.customerEmail = customerEmail;
            return this;
        }
        
        /**
         * Set clientReferenceId
         * @param clientReferenceId  (optional)
         * @return CreateSessionRequestBuilder
         */
        public CreateSessionRequestBuilder clientReferenceId(String clientReferenceId) {
            this.clientReferenceId = clientReferenceId;
            return this;
        }
        
        /**
         * Set cancelUrl
         * @param cancelUrl  (optional)
         * @return CreateSessionRequestBuilder
         */
        public CreateSessionRequestBuilder cancelUrl(URI cancelUrl) {
            this.cancelUrl = cancelUrl;
            return this;
        }
        
        /**
         * Set userId
         * @param userId Supply a Dots user ID in place of a customer ID (optional)
         * @return CreateSessionRequestBuilder
         */
        public CreateSessionRequestBuilder userId(UUID userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set customerId
         * @param customerId  (optional)
         * @return CreateSessionRequestBuilder
         */
        public CreateSessionRequestBuilder customerId(UUID customerId) {
            this.customerId = customerId;
            return this;
        }
        
        /**
         * Set expiresIn
         * @param expiresIn  (optional, default to 10800)
         * @return CreateSessionRequestBuilder
         */
        public CreateSessionRequestBuilder expiresIn(Integer expiresIn) {
            this.expiresIn = expiresIn;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata  (optional)
         * @return CreateSessionRequestBuilder
         */
        public CreateSessionRequestBuilder metadata(Object metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Build call for createSession
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CheckoutsessionsCreateSessionRequest checkoutsessionsCreateSessionRequest = buildBodyParams();
            return createSessionCall(checkoutsessionsCreateSessionRequest, _callback);
        }

        private CheckoutsessionsCreateSessionRequest buildBodyParams() {
            CheckoutsessionsCreateSessionRequest checkoutsessionsCreateSessionRequest = new CheckoutsessionsCreateSessionRequest();
            checkoutsessionsCreateSessionRequest.lineItems(this.lineItems);
            checkoutsessionsCreateSessionRequest.customerEmail(this.customerEmail);
            checkoutsessionsCreateSessionRequest.clientReferenceId(this.clientReferenceId);
            checkoutsessionsCreateSessionRequest.successUrl(this.successUrl);
            checkoutsessionsCreateSessionRequest.cancelUrl(this.cancelUrl);
            if (this.mode != null)
            checkoutsessionsCreateSessionRequest.mode(CheckoutsessionsCreateSessionRequest.ModeEnum.fromValue(this.mode));
            checkoutsessionsCreateSessionRequest.userId(this.userId);
            checkoutsessionsCreateSessionRequest.customerId(this.customerId);
            checkoutsessionsCreateSessionRequest.expiresIn(this.expiresIn);
            checkoutsessionsCreateSessionRequest.metadata(this.metadata);
            return checkoutsessionsCreateSessionRequest;
        }

        /**
         * Execute createSession request
         * @return CheckoutSession
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CheckoutSession execute() throws ApiException {
            CheckoutsessionsCreateSessionRequest checkoutsessionsCreateSessionRequest = buildBodyParams();
            ApiResponse<CheckoutSession> localVarResp = createSessionWithHttpInfo(checkoutsessionsCreateSessionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSession request with HTTP info returned
         * @return ApiResponse&lt;CheckoutSession&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckoutSession> executeWithHttpInfo() throws ApiException {
            CheckoutsessionsCreateSessionRequest checkoutsessionsCreateSessionRequest = buildBodyParams();
            return createSessionWithHttpInfo(checkoutsessionsCreateSessionRequest);
        }

        /**
         * Execute createSession request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckoutSession> _callback) throws ApiException {
            CheckoutsessionsCreateSessionRequest checkoutsessionsCreateSessionRequest = buildBodyParams();
            return createSessionAsync(checkoutsessionsCreateSessionRequest, _callback);
        }
    }

    /**
     * Create a Checkout Session
     * Create a checkout session
     * @return CreateSessionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateSessionRequestBuilder createSession(Set<CheckoutsessionsCreateSessionRequestLineItemsInner> lineItems, URI successUrl, String mode) throws IllegalArgumentException {
        if (lineItems == null) throw new IllegalArgumentException("\"lineItems\" is required but got null");
        if (successUrl == null) throw new IllegalArgumentException("\"successUrl\" is required but got null");
            

        if (mode == null) throw new IllegalArgumentException("\"mode\" is required but got null");
            

        return new CreateSessionRequestBuilder(lineItems, successUrl, mode);
    }
    private okhttp3.Call getByIdCall(String checkoutSessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/checkout-sessions/{checkout_session_id}"
            .replace("{" + "checkout_session_id" + "}", localVarApiClient.escapeString(checkoutSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String checkoutSessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkoutSessionId' is set
        if (checkoutSessionId == null) {
            throw new ApiException("Missing the required parameter 'checkoutSessionId' when calling getById(Async)");
        }

        return getByIdCall(checkoutSessionId, _callback);

    }


    private ApiResponse<CheckoutSession> getByIdWithHttpInfo(String checkoutSessionId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(checkoutSessionId, null);
        Type localVarReturnType = new TypeToken<CheckoutSession>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String checkoutSessionId, final ApiCallback<CheckoutSession> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(checkoutSessionId, _callback);
        Type localVarReturnType = new TypeToken<CheckoutSession>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String checkoutSessionId;

        private GetByIdRequestBuilder(String checkoutSessionId) {
            this.checkoutSessionId = checkoutSessionId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(checkoutSessionId, _callback);
        }


        /**
         * Execute getById request
         * @return CheckoutSession
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CheckoutSession execute() throws ApiException {
            ApiResponse<CheckoutSession> localVarResp = getByIdWithHttpInfo(checkoutSessionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;CheckoutSession&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckoutSession> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(checkoutSessionId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckoutSession> _callback) throws ApiException {
            return getByIdAsync(checkoutSessionId, _callback);
        }
    }

    /**
     * Retrieve a Checkout Session
     * Retrieve a checkout session by an ID
     * @param checkoutSessionId ID of the checkout session to retrieve (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String checkoutSessionId) throws IllegalArgumentException {
        if (checkoutSessionId == null) throw new IllegalArgumentException("\"checkoutSessionId\" is required but got null");
            

        return new GetByIdRequestBuilder(checkoutSessionId);
    }
    private okhttp3.Call listAllCall(String limit, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/checkout-sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(String limit, String startingAfter, String endingBefore, final ApiCallback _callback) throws ApiException {
        return listAllCall(limit, startingAfter, endingBefore, _callback);

    }


    private ApiResponse<CheckoutsessionsListAllResponse> listAllWithHttpInfo(String limit, String startingAfter, String endingBefore) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(limit, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<CheckoutsessionsListAllResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(String limit, String startingAfter, String endingBefore, final ApiCallback<CheckoutsessionsListAllResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(limit, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<CheckoutsessionsListAllResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private String limit;
        private String startingAfter;
        private String endingBefore;

        private ListAllRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit A limit on the number of objects to be returned, between 1 and 100. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set startingAfter
         * @param startingAfter A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;aaa&#x60;, your subsequent call can include &#x60;starting_after&#x60;&#x3D;&#x60;aaa&#x60; in order to fetch the next page of the list. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder startingAfter(String startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;aaa&#x60;, your subsequent call can include &#x60;ending_before&#x60;&#x3D;&#x60;aaa&#x60; in order to fetch the previous page of the list. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder endingBefore(String endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(limit, startingAfter, endingBefore, _callback);
        }


        /**
         * Execute listAll request
         * @return CheckoutsessionsListAllResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CheckoutsessionsListAllResponse execute() throws ApiException {
            ApiResponse<CheckoutsessionsListAllResponse> localVarResp = listAllWithHttpInfo(limit, startingAfter, endingBefore);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;CheckoutsessionsListAllResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckoutsessionsListAllResponse> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(limit, startingAfter, endingBefore);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckoutsessionsListAllResponse> _callback) throws ApiException {
            return listAllAsync(limit, startingAfter, endingBefore, _callback);
        }
    }

    /**
     * List all Checkout Sessions
     * List all checkout sessions
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
}
