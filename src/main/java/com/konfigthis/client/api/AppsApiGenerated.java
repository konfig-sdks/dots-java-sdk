/*
 * dots api
 * Scalable and Flexible Payouts Infrastructure
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@dots.dev
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.App;
import com.konfigthis.client.model.AppsAddAchAccountRequest;
import com.konfigthis.client.model.AppsAddAchAccountResponse;
import com.konfigthis.client.model.AppsCreateNewAppRequest;
import com.konfigthis.client.model.AppsDepositFundsRequest;
import com.konfigthis.client.model.AppsGetAchAccountResponse;
import com.konfigthis.client.model.AppsWithdrawFundsRequest;
import com.konfigthis.client.model.BusinessComplianceInfo;
import com.konfigthis.client.model.BusinessComplianceInfoCompanyInfo;
import com.konfigthis.client.model.BusinessComplianceInfoContactInfo;
import com.konfigthis.client.model.BusinessComplianceInfoDirectorsInner;
import com.konfigthis.client.model.BusinessComplianceInfoFlowOfFunds;
import com.konfigthis.client.model.Transfer;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AppsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AppsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addAchAccountCall(String appId, AppsAddAchAccountRequest appsAddAchAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appsAddAchAccountRequest;

        // create path and map variables
        String localVarPath = "/v2/apps/{app_id}/ach-account"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAchAccountValidateBeforeCall(String appId, AppsAddAchAccountRequest appsAddAchAccountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling addAchAccount(Async)");
        }

        return addAchAccountCall(appId, appsAddAchAccountRequest, _callback);

    }


    private ApiResponse<AppsAddAchAccountResponse> addAchAccountWithHttpInfo(String appId, AppsAddAchAccountRequest appsAddAchAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = addAchAccountValidateBeforeCall(appId, appsAddAchAccountRequest, null);
        Type localVarReturnType = new TypeToken<AppsAddAchAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addAchAccountAsync(String appId, AppsAddAchAccountRequest appsAddAchAccountRequest, final ApiCallback<AppsAddAchAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAchAccountValidateBeforeCall(appId, appsAddAchAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<AppsAddAchAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddAchAccountRequestBuilder {
        private final String accountNumber;
        private final String routingNumber;
        private final String accountType;
        private final String appId;

        private AddAchAccountRequestBuilder(String accountNumber, String routingNumber, String accountType, String appId) {
            this.accountNumber = accountNumber;
            this.routingNumber = routingNumber;
            this.accountType = accountType;
            this.appId = appId;
        }

        /**
         * Build call for addAchAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AppsAddAchAccountRequest appsAddAchAccountRequest = buildBodyParams();
            return addAchAccountCall(appId, appsAddAchAccountRequest, _callback);
        }

        private AppsAddAchAccountRequest buildBodyParams() {
            AppsAddAchAccountRequest appsAddAchAccountRequest = new AppsAddAchAccountRequest();
            appsAddAchAccountRequest.accountNumber(this.accountNumber);
            appsAddAchAccountRequest.routingNumber(this.routingNumber);
            if (this.accountType != null)
            appsAddAchAccountRequest.accountType(AppsAddAchAccountRequest.AccountTypeEnum.fromValue(this.accountType));
            return appsAddAchAccountRequest;
        }

        /**
         * Execute addAchAccount request
         * @return AppsAddAchAccountResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AppsAddAchAccountResponse execute() throws ApiException {
            AppsAddAchAccountRequest appsAddAchAccountRequest = buildBodyParams();
            ApiResponse<AppsAddAchAccountResponse> localVarResp = addAchAccountWithHttpInfo(appId, appsAddAchAccountRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addAchAccount request with HTTP info returned
         * @return ApiResponse&lt;AppsAddAchAccountResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppsAddAchAccountResponse> executeWithHttpInfo() throws ApiException {
            AppsAddAchAccountRequest appsAddAchAccountRequest = buildBodyParams();
            return addAchAccountWithHttpInfo(appId, appsAddAchAccountRequest);
        }

        /**
         * Execute addAchAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppsAddAchAccountResponse> _callback) throws ApiException {
            AppsAddAchAccountRequest appsAddAchAccountRequest = buildBodyParams();
            return addAchAccountAsync(appId, appsAddAchAccountRequest, _callback);
        }
    }

    /**
     * Add App ACH Account
     * Add an ACH account to an app. The account&#39;s owner must match the compliance information submitted.
     * @param appId The ID of the app. (required)
     * @return AddAchAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AddAchAccountRequestBuilder addAchAccount(String accountNumber, String routingNumber, String accountType, String appId) throws IllegalArgumentException {
        if (accountNumber == null) throw new IllegalArgumentException("\"accountNumber\" is required but got null");
            

        if (routingNumber == null) throw new IllegalArgumentException("\"routingNumber\" is required but got null");
            

        if (accountType == null) throw new IllegalArgumentException("\"accountType\" is required but got null");
            

        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new AddAchAccountRequestBuilder(accountNumber, routingNumber, accountType, appId);
    }
    private okhttp3.Call createNewAppCall(AppsCreateNewAppRequest appsCreateNewAppRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appsCreateNewAppRequest;

        // create path and map variables
        String localVarPath = "/v2/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewAppValidateBeforeCall(AppsCreateNewAppRequest appsCreateNewAppRequest, final ApiCallback _callback) throws ApiException {
        return createNewAppCall(appsCreateNewAppRequest, _callback);

    }


    private ApiResponse<App> createNewAppWithHttpInfo(AppsCreateNewAppRequest appsCreateNewAppRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewAppValidateBeforeCall(appsCreateNewAppRequest, null);
        Type localVarReturnType = new TypeToken<App>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAppAsync(AppsCreateNewAppRequest appsCreateNewAppRequest, final ApiCallback<App> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewAppValidateBeforeCall(appsCreateNewAppRequest, _callback);
        Type localVarReturnType = new TypeToken<App>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewAppRequestBuilder {
        private final String name;
        private Object metadata;

        private CreateNewAppRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set metadata
         * @param metadata Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. (optional)
         * @return CreateNewAppRequestBuilder
         */
        public CreateNewAppRequestBuilder metadata(Object metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Build call for createNewApp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AppsCreateNewAppRequest appsCreateNewAppRequest = buildBodyParams();
            return createNewAppCall(appsCreateNewAppRequest, _callback);
        }

        private AppsCreateNewAppRequest buildBodyParams() {
            AppsCreateNewAppRequest appsCreateNewAppRequest = new AppsCreateNewAppRequest();
            appsCreateNewAppRequest.name(this.name);
            appsCreateNewAppRequest.metadata(this.metadata);
            return appsCreateNewAppRequest;
        }

        /**
         * Execute createNewApp request
         * @return App
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public App execute() throws ApiException {
            AppsCreateNewAppRequest appsCreateNewAppRequest = buildBodyParams();
            ApiResponse<App> localVarResp = createNewAppWithHttpInfo(appsCreateNewAppRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewApp request with HTTP info returned
         * @return ApiResponse&lt;App&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<App> executeWithHttpInfo() throws ApiException {
            AppsCreateNewAppRequest appsCreateNewAppRequest = buildBodyParams();
            return createNewAppWithHttpInfo(appsCreateNewAppRequest);
        }

        /**
         * Execute createNewApp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<App> _callback) throws ApiException {
            AppsCreateNewAppRequest appsCreateNewAppRequest = buildBodyParams();
            return createNewAppAsync(appsCreateNewAppRequest, _callback);
        }
    }

    /**
     * Create an App
     * Create an app in your organization
     * @return CreateNewAppRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewAppRequestBuilder createNewApp(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            if (name != null && name.length() < 3) {
              throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 3.");
            }

        return new CreateNewAppRequestBuilder(name);
    }
    private okhttp3.Call depositFundsCall(String appId, AppsDepositFundsRequest appsDepositFundsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appsDepositFundsRequest;

        // create path and map variables
        String localVarPath = "/v2/apps/{app_id}/deposit"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call depositFundsValidateBeforeCall(String appId, AppsDepositFundsRequest appsDepositFundsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling depositFunds(Async)");
        }

        return depositFundsCall(appId, appsDepositFundsRequest, _callback);

    }


    private ApiResponse<Transfer> depositFundsWithHttpInfo(String appId, AppsDepositFundsRequest appsDepositFundsRequest) throws ApiException {
        okhttp3.Call localVarCall = depositFundsValidateBeforeCall(appId, appsDepositFundsRequest, null);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call depositFundsAsync(String appId, AppsDepositFundsRequest appsDepositFundsRequest, final ApiCallback<Transfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = depositFundsValidateBeforeCall(appId, appsDepositFundsRequest, _callback);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DepositFundsRequestBuilder {
        private final Integer amount;
        private final String appId;
        private UUID idempotencyKey;

        private DepositFundsRequestBuilder(Integer amount, String appId) {
            this.amount = amount;
            this.appId = appId;
        }

        /**
         * Set idempotencyKey
         * @param idempotencyKey Idempotency key in UUID format. (optional)
         * @return DepositFundsRequestBuilder
         */
        public DepositFundsRequestBuilder idempotencyKey(UUID idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Build call for depositFunds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AppsDepositFundsRequest appsDepositFundsRequest = buildBodyParams();
            return depositFundsCall(appId, appsDepositFundsRequest, _callback);
        }

        private AppsDepositFundsRequest buildBodyParams() {
            AppsDepositFundsRequest appsDepositFundsRequest = new AppsDepositFundsRequest();
            appsDepositFundsRequest.amount(this.amount);
            appsDepositFundsRequest.idempotencyKey(this.idempotencyKey);
            return appsDepositFundsRequest;
        }

        /**
         * Execute depositFunds request
         * @return Transfer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public Transfer execute() throws ApiException {
            AppsDepositFundsRequest appsDepositFundsRequest = buildBodyParams();
            ApiResponse<Transfer> localVarResp = depositFundsWithHttpInfo(appId, appsDepositFundsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute depositFunds request with HTTP info returned
         * @return ApiResponse&lt;Transfer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Transfer> executeWithHttpInfo() throws ApiException {
            AppsDepositFundsRequest appsDepositFundsRequest = buildBodyParams();
            return depositFundsWithHttpInfo(appId, appsDepositFundsRequest);
        }

        /**
         * Execute depositFunds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Transfer> _callback) throws ApiException {
            AppsDepositFundsRequest appsDepositFundsRequest = buildBodyParams();
            return depositFundsAsync(appId, appsDepositFundsRequest, _callback);
        }
    }

    /**
     * Deposit Funds into App Wallet
     * Deposit funds into App wallet by endpoint.
     * @param appId The ID of the App. (required)
     * @return DepositFundsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DepositFundsRequestBuilder depositFunds(Integer amount, String appId) throws IllegalArgumentException {
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new DepositFundsRequestBuilder(amount, appId);
    }
    private okhttp3.Call getAchAccountCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/apps/{app_id}/ach-account"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAchAccountValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getAchAccount(Async)");
        }

        return getAchAccountCall(appId, _callback);

    }


    private ApiResponse<AppsGetAchAccountResponse> getAchAccountWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getAchAccountValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<AppsGetAchAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAchAccountAsync(String appId, final ApiCallback<AppsGetAchAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAchAccountValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<AppsGetAchAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAchAccountRequestBuilder {
        private final String appId;

        private GetAchAccountRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Build call for getAchAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAchAccountCall(appId, _callback);
        }


        /**
         * Execute getAchAccount request
         * @return AppsGetAchAccountResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AppsGetAchAccountResponse execute() throws ApiException {
            ApiResponse<AppsGetAchAccountResponse> localVarResp = getAchAccountWithHttpInfo(appId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAchAccount request with HTTP info returned
         * @return ApiResponse&lt;AppsGetAchAccountResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppsGetAchAccountResponse> executeWithHttpInfo() throws ApiException {
            return getAchAccountWithHttpInfo(appId);
        }

        /**
         * Execute getAchAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppsGetAchAccountResponse> _callback) throws ApiException {
            return getAchAccountAsync(appId, _callback);
        }
    }

    /**
     * Get App ACH Account
     * Get the App&#39;s ach account information.
     * @param appId The ID of the app. (required)
     * @return GetAchAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetAchAccountRequestBuilder getAchAccount(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new GetAchAccountRequestBuilder(appId);
    }
    private okhttp3.Call getByIdCall(UUID appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/apps/{app_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(UUID appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getById(Async)");
        }

        return getByIdCall(appId, _callback);

    }


    private ApiResponse<App> getByIdWithHttpInfo(UUID appId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<App>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(UUID appId, final ApiCallback<App> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<App>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final UUID appId;

        private GetByIdRequestBuilder(UUID appId) {
            this.appId = appId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(appId, _callback);
        }


        /**
         * Execute getById request
         * @return App
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public App execute() throws ApiException {
            ApiResponse<App> localVarResp = getByIdWithHttpInfo(appId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;App&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<App> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(appId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<App> _callback) throws ApiException {
            return getByIdAsync(appId, _callback);
        }
    }

    /**
     * Retrieve an App
     * Retrieve an app in your organization by its ID
     * @param appId ID of the app to retrieve (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(UUID appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new GetByIdRequestBuilder(appId);
    }
    private okhttp3.Call getComplianceInfoCall(UUID appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/apps/{app_id}/compliance"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getComplianceInfoValidateBeforeCall(UUID appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getComplianceInfo(Async)");
        }

        return getComplianceInfoCall(appId, _callback);

    }


    private ApiResponse<BusinessComplianceInfo> getComplianceInfoWithHttpInfo(UUID appId) throws ApiException {
        okhttp3.Call localVarCall = getComplianceInfoValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<BusinessComplianceInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getComplianceInfoAsync(UUID appId, final ApiCallback<BusinessComplianceInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getComplianceInfoValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<BusinessComplianceInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetComplianceInfoRequestBuilder {
        private final UUID appId;

        private GetComplianceInfoRequestBuilder(UUID appId) {
            this.appId = appId;
        }

        /**
         * Build call for getComplianceInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getComplianceInfoCall(appId, _callback);
        }


        /**
         * Execute getComplianceInfo request
         * @return BusinessComplianceInfo
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public BusinessComplianceInfo execute() throws ApiException {
            ApiResponse<BusinessComplianceInfo> localVarResp = getComplianceInfoWithHttpInfo(appId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getComplianceInfo request with HTTP info returned
         * @return ApiResponse&lt;BusinessComplianceInfo&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BusinessComplianceInfo> executeWithHttpInfo() throws ApiException {
            return getComplianceInfoWithHttpInfo(appId);
        }

        /**
         * Execute getComplianceInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BusinessComplianceInfo> _callback) throws ApiException {
            return getComplianceInfoAsync(appId, _callback);
        }
    }

    /**
     * Retrieve an App&#39;s Compliance Information
     * Retrieve the compliance information for an app in your organization
     * @param appId ID of the app to query or modify (required)
     * @return GetComplianceInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public GetComplianceInfoRequestBuilder getComplianceInfo(UUID appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new GetComplianceInfoRequestBuilder(appId);
    }
    private okhttp3.Call listAllCall(Integer limit, UUID startingAfter, UUID endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(Integer limit, UUID startingAfter, UUID endingBefore, final ApiCallback _callback) throws ApiException {
        return listAllCall(limit, startingAfter, endingBefore, _callback);

    }


    private ApiResponse<List<App>> listAllWithHttpInfo(Integer limit, UUID startingAfter, UUID endingBefore) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(limit, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<List<App>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(Integer limit, UUID startingAfter, UUID endingBefore, final ApiCallback<List<App>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(limit, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<List<App>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private Integer limit;
        private UUID startingAfter;
        private UUID endingBefore;

        private ListAllRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit Maximum number of results to retrieve (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set startingAfter
         * @param startingAfter ID of first app to retrieve (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder startingAfter(UUID startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore ID of last app to retrieve (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder endingBefore(UUID endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(limit, startingAfter, endingBefore, _callback);
        }


        /**
         * Execute listAll request
         * @return List&lt;App&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public List<App> execute() throws ApiException {
            ApiResponse<List<App>> localVarResp = listAllWithHttpInfo(limit, startingAfter, endingBefore);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;List&lt;App&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<App>> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(limit, startingAfter, endingBefore);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<App>> _callback) throws ApiException {
            return listAllAsync(limit, startingAfter, endingBefore, _callback);
        }
    }

    /**
     * List all Apps
     * List all apps created by your organization
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
    private okhttp3.Call updateComplianceInfoCall(UUID appId, BusinessComplianceInfo businessComplianceInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessComplianceInfo;

        // create path and map variables
        String localVarPath = "/v2/apps/{app_id}/compliance"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateComplianceInfoValidateBeforeCall(UUID appId, BusinessComplianceInfo businessComplianceInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateComplianceInfo(Async)");
        }

        return updateComplianceInfoCall(appId, businessComplianceInfo, _callback);

    }


    private ApiResponse<BusinessComplianceInfo> updateComplianceInfoWithHttpInfo(UUID appId, BusinessComplianceInfo businessComplianceInfo) throws ApiException {
        okhttp3.Call localVarCall = updateComplianceInfoValidateBeforeCall(appId, businessComplianceInfo, null);
        Type localVarReturnType = new TypeToken<BusinessComplianceInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateComplianceInfoAsync(UUID appId, BusinessComplianceInfo businessComplianceInfo, final ApiCallback<BusinessComplianceInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateComplianceInfoValidateBeforeCall(appId, businessComplianceInfo, _callback);
        Type localVarReturnType = new TypeToken<BusinessComplianceInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateComplianceInfoRequestBuilder {
        private final BusinessComplianceInfoCompanyInfo companyInfo;
        private final BusinessComplianceInfoContactInfo contactInfo;
        private final List<BusinessComplianceInfoDirectorsInner> directors;
        private final BusinessComplianceInfoFlowOfFunds flowOfFunds;
        private final UUID appId;

        private UpdateComplianceInfoRequestBuilder(BusinessComplianceInfoCompanyInfo companyInfo, BusinessComplianceInfoContactInfo contactInfo, List<BusinessComplianceInfoDirectorsInner> directors, BusinessComplianceInfoFlowOfFunds flowOfFunds, UUID appId) {
            this.companyInfo = companyInfo;
            this.contactInfo = contactInfo;
            this.directors = directors;
            this.flowOfFunds = flowOfFunds;
            this.appId = appId;
        }

        /**
         * Build call for updateComplianceInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BusinessComplianceInfo businessComplianceInfo = buildBodyParams();
            return updateComplianceInfoCall(appId, businessComplianceInfo, _callback);
        }

        private BusinessComplianceInfo buildBodyParams() {
            BusinessComplianceInfo businessComplianceInfo = new BusinessComplianceInfo();
            businessComplianceInfo.companyInfo(this.companyInfo);
            businessComplianceInfo.contactInfo(this.contactInfo);
            businessComplianceInfo.directors(this.directors);
            businessComplianceInfo.flowOfFunds(this.flowOfFunds);
            return businessComplianceInfo;
        }

        /**
         * Execute updateComplianceInfo request
         * @return BusinessComplianceInfo
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public BusinessComplianceInfo execute() throws ApiException {
            BusinessComplianceInfo businessComplianceInfo = buildBodyParams();
            ApiResponse<BusinessComplianceInfo> localVarResp = updateComplianceInfoWithHttpInfo(appId, businessComplianceInfo);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateComplianceInfo request with HTTP info returned
         * @return ApiResponse&lt;BusinessComplianceInfo&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BusinessComplianceInfo> executeWithHttpInfo() throws ApiException {
            BusinessComplianceInfo businessComplianceInfo = buildBodyParams();
            return updateComplianceInfoWithHttpInfo(appId, businessComplianceInfo);
        }

        /**
         * Execute updateComplianceInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BusinessComplianceInfo> _callback) throws ApiException {
            BusinessComplianceInfo businessComplianceInfo = buildBodyParams();
            return updateComplianceInfoAsync(appId, businessComplianceInfo, _callback);
        }
    }

    /**
     * Update an App&#39;s Compliance Information
     * Add or update compliance information for an app in your organization
     * @param appId ID of the app to query or modify (required)
     * @return UpdateComplianceInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateComplianceInfoRequestBuilder updateComplianceInfo(BusinessComplianceInfoCompanyInfo companyInfo, BusinessComplianceInfoContactInfo contactInfo, List<BusinessComplianceInfoDirectorsInner> directors, BusinessComplianceInfoFlowOfFunds flowOfFunds, UUID appId) throws IllegalArgumentException {
        if (companyInfo == null) throw new IllegalArgumentException("\"companyInfo\" is required but got null");
        if (contactInfo == null) throw new IllegalArgumentException("\"contactInfo\" is required but got null");
        if (directors == null) throw new IllegalArgumentException("\"directors\" is required but got null");
        if (flowOfFunds == null) throw new IllegalArgumentException("\"flowOfFunds\" is required but got null");
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new UpdateComplianceInfoRequestBuilder(companyInfo, contactInfo, directors, flowOfFunds, appId);
    }
    private okhttp3.Call withdrawFundsCall(String appId, AppsWithdrawFundsRequest appsWithdrawFundsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appsWithdrawFundsRequest;

        // create path and map variables
        String localVarPath = "/v2/apps/{app_id}/withdraw"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call withdrawFundsValidateBeforeCall(String appId, AppsWithdrawFundsRequest appsWithdrawFundsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling withdrawFunds(Async)");
        }

        return withdrawFundsCall(appId, appsWithdrawFundsRequest, _callback);

    }


    private ApiResponse<Transfer> withdrawFundsWithHttpInfo(String appId, AppsWithdrawFundsRequest appsWithdrawFundsRequest) throws ApiException {
        okhttp3.Call localVarCall = withdrawFundsValidateBeforeCall(appId, appsWithdrawFundsRequest, null);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call withdrawFundsAsync(String appId, AppsWithdrawFundsRequest appsWithdrawFundsRequest, final ApiCallback<Transfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = withdrawFundsValidateBeforeCall(appId, appsWithdrawFundsRequest, _callback);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class WithdrawFundsRequestBuilder {
        private final Integer amount;
        private final String appId;
        private UUID idempotencyKey;

        private WithdrawFundsRequestBuilder(Integer amount, String appId) {
            this.amount = amount;
            this.appId = appId;
        }

        /**
         * Set idempotencyKey
         * @param idempotencyKey Idempotency key in UUID format. (optional)
         * @return WithdrawFundsRequestBuilder
         */
        public WithdrawFundsRequestBuilder idempotencyKey(UUID idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Build call for withdrawFunds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AppsWithdrawFundsRequest appsWithdrawFundsRequest = buildBodyParams();
            return withdrawFundsCall(appId, appsWithdrawFundsRequest, _callback);
        }

        private AppsWithdrawFundsRequest buildBodyParams() {
            AppsWithdrawFundsRequest appsWithdrawFundsRequest = new AppsWithdrawFundsRequest();
            appsWithdrawFundsRequest.amount(this.amount);
            appsWithdrawFundsRequest.idempotencyKey(this.idempotencyKey);
            return appsWithdrawFundsRequest;
        }

        /**
         * Execute withdrawFunds request
         * @return Transfer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public Transfer execute() throws ApiException {
            AppsWithdrawFundsRequest appsWithdrawFundsRequest = buildBodyParams();
            ApiResponse<Transfer> localVarResp = withdrawFundsWithHttpInfo(appId, appsWithdrawFundsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute withdrawFunds request with HTTP info returned
         * @return ApiResponse&lt;Transfer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Transfer> executeWithHttpInfo() throws ApiException {
            AppsWithdrawFundsRequest appsWithdrawFundsRequest = buildBodyParams();
            return withdrawFundsWithHttpInfo(appId, appsWithdrawFundsRequest);
        }

        /**
         * Execute withdrawFunds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Transfer> _callback) throws ApiException {
            AppsWithdrawFundsRequest appsWithdrawFundsRequest = buildBodyParams();
            return withdrawFundsAsync(appId, appsWithdrawFundsRequest, _callback);
        }
    }

    /**
     * Withdraw Funds From App Wallet
     * Withdraw funds from app wallet into app bank account.
     * @param appId The ID of the App. (required)
     * @return WithdrawFundsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public WithdrawFundsRequestBuilder withdrawFunds(Integer amount, String appId) throws IllegalArgumentException {
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new WithdrawFundsRequestBuilder(amount, appId);
    }
}
