/*
 * dots api
 * Scalable and Flexible Payouts Infrastructure
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@dots.dev
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PayoutLink;
import com.konfigthis.client.model.PayoutlinksCreatePayoutLinkRequest;
import com.konfigthis.client.model.PayoutlinksCreatePayoutLinkRequestDelivery;
import com.konfigthis.client.model.PayoutlinksCreatePayoutLinkRequestPayee;
import com.konfigthis.client.model.PayoutlinksListAllResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PayoutLinksApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PayoutLinksApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PayoutLinksApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call cancelLinkCall(String payoutLinkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/payout-links/{payout_link_id}"
            .replace("{" + "payout_link_id" + "}", localVarApiClient.escapeString(payoutLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelLinkValidateBeforeCall(String payoutLinkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payoutLinkId' is set
        if (payoutLinkId == null) {
            throw new ApiException("Missing the required parameter 'payoutLinkId' when calling cancelLink(Async)");
        }

        return cancelLinkCall(payoutLinkId, _callback);

    }


    private ApiResponse<PayoutLink> cancelLinkWithHttpInfo(String payoutLinkId) throws ApiException {
        okhttp3.Call localVarCall = cancelLinkValidateBeforeCall(payoutLinkId, null);
        Type localVarReturnType = new TypeToken<PayoutLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelLinkAsync(String payoutLinkId, final ApiCallback<PayoutLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelLinkValidateBeforeCall(payoutLinkId, _callback);
        Type localVarReturnType = new TypeToken<PayoutLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CancelLinkRequestBuilder {
        private final String payoutLinkId;

        private CancelLinkRequestBuilder(String payoutLinkId) {
            this.payoutLinkId = payoutLinkId;
        }

        /**
         * Build call for cancelLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelLinkCall(payoutLinkId, _callback);
        }


        /**
         * Execute cancelLink request
         * @return PayoutLink
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PayoutLink execute() throws ApiException {
            ApiResponse<PayoutLink> localVarResp = cancelLinkWithHttpInfo(payoutLinkId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cancelLink request with HTTP info returned
         * @return ApiResponse&lt;PayoutLink&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayoutLink> executeWithHttpInfo() throws ApiException {
            return cancelLinkWithHttpInfo(payoutLinkId);
        }

        /**
         * Execute cancelLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayoutLink> _callback) throws ApiException {
            return cancelLinkAsync(payoutLinkId, _callback);
        }
    }

    /**
     * Delete a Payout Link
     * Cancel a payout link
     * @param payoutLinkId Id of the payout link (required)
     * @return CancelLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CancelLinkRequestBuilder cancelLink(String payoutLinkId) throws IllegalArgumentException {
        if (payoutLinkId == null) throw new IllegalArgumentException("\"payoutLinkId\" is required but got null");
            

        return new CancelLinkRequestBuilder(payoutLinkId);
    }
    private okhttp3.Call createPayoutLinkCall(PayoutlinksCreatePayoutLinkRequest payoutlinksCreatePayoutLinkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payoutlinksCreatePayoutLinkRequest;

        // create path and map variables
        String localVarPath = "/v2/payout-links";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPayoutLinkValidateBeforeCall(PayoutlinksCreatePayoutLinkRequest payoutlinksCreatePayoutLinkRequest, final ApiCallback _callback) throws ApiException {
        return createPayoutLinkCall(payoutlinksCreatePayoutLinkRequest, _callback);

    }


    private ApiResponse<PayoutLink> createPayoutLinkWithHttpInfo(PayoutlinksCreatePayoutLinkRequest payoutlinksCreatePayoutLinkRequest) throws ApiException {
        okhttp3.Call localVarCall = createPayoutLinkValidateBeforeCall(payoutlinksCreatePayoutLinkRequest, null);
        Type localVarReturnType = new TypeToken<PayoutLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPayoutLinkAsync(PayoutlinksCreatePayoutLinkRequest payoutlinksCreatePayoutLinkRequest, final ApiCallback<PayoutLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPayoutLinkValidateBeforeCall(payoutlinksCreatePayoutLinkRequest, _callback);
        Type localVarReturnType = new TypeToken<PayoutLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePayoutLinkRequestBuilder {
        private final Integer amount;
        private UUID userId;
        private PayoutlinksCreatePayoutLinkRequestPayee payee;
        private PayoutlinksCreatePayoutLinkRequestDelivery delivery;
        private Boolean forceCollectComplianceInformation;
        private Boolean taxExempt;
        private Object metadata;
        private String memo;
        private Object idempotencyKey;
        private UUID payoutFeeParty;
        private List<String> additionalSteps;

        private CreatePayoutLinkRequestBuilder(Integer amount) {
            this.amount = amount;
        }

        /**
         * Set userId
         * @param userId The user&#39;s id. (optional)
         * @return CreatePayoutLinkRequestBuilder
         */
        public CreatePayoutLinkRequestBuilder userId(UUID userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set payee
         * @param payee  (optional)
         * @return CreatePayoutLinkRequestBuilder
         */
        public CreatePayoutLinkRequestBuilder payee(PayoutlinksCreatePayoutLinkRequestPayee payee) {
            this.payee = payee;
            return this;
        }
        
        /**
         * Set delivery
         * @param delivery  (optional)
         * @return CreatePayoutLinkRequestBuilder
         */
        public CreatePayoutLinkRequestBuilder delivery(PayoutlinksCreatePayoutLinkRequestDelivery delivery) {
            this.delivery = delivery;
            return this;
        }
        
        /**
         * Set forceCollectComplianceInformation
         * @param forceCollectComplianceInformation Force the collection of 1099 or W-8 information. Defaults to &#x60;false&#x60;. (optional, default to false)
         * @return CreatePayoutLinkRequestBuilder
         */
        public CreatePayoutLinkRequestBuilder forceCollectComplianceInformation(Boolean forceCollectComplianceInformation) {
            this.forceCollectComplianceInformation = forceCollectComplianceInformation;
            return this;
        }
        
        /**
         * Set taxExempt
         * @param taxExempt Payout links marked as &#x60;tax_exempt&#x60; will not be counted towards the 1099 threshold. (optional)
         * @return CreatePayoutLinkRequestBuilder
         */
        public CreatePayoutLinkRequestBuilder taxExempt(Boolean taxExempt) {
            this.taxExempt = taxExempt;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. (optional)
         * @return CreatePayoutLinkRequestBuilder
         */
        public CreatePayoutLinkRequestBuilder metadata(Object metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set memo
         * @param memo Add a memo to the top of the Payout Link (optional)
         * @return CreatePayoutLinkRequestBuilder
         */
        public CreatePayoutLinkRequestBuilder memo(String memo) {
            this.memo = memo;
            return this;
        }
        
        /**
         * Set idempotencyKey
         * @param idempotencyKey Unique UUID key that prevents duplicate requests from being processed. If a payout link with the idempotency key exists, a new link will not be created and the existing link will be returned instead. (optional)
         * @return CreatePayoutLinkRequestBuilder
         */
        public CreatePayoutLinkRequestBuilder idempotencyKey(Object idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Set payoutFeeParty
         * @param payoutFeeParty Overrides the setting for which party will pay fees on this payout. This takes precedence over the default for your application. (optional)
         * @return CreatePayoutLinkRequestBuilder
         */
        public CreatePayoutLinkRequestBuilder payoutFeeParty(UUID payoutFeeParty) {
            this.payoutFeeParty = payoutFeeParty;
            return this;
        }
        
        /**
         * Set additionalSteps
         * @param additionalSteps Array of steps in the flow. (optional)
         * @return CreatePayoutLinkRequestBuilder
         */
        public CreatePayoutLinkRequestBuilder additionalSteps(List<String> additionalSteps) {
            this.additionalSteps = additionalSteps;
            return this;
        }
        
        /**
         * Build call for createPayoutLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayoutlinksCreatePayoutLinkRequest payoutlinksCreatePayoutLinkRequest = buildBodyParams();
            return createPayoutLinkCall(payoutlinksCreatePayoutLinkRequest, _callback);
        }

        private PayoutlinksCreatePayoutLinkRequest buildBodyParams() {
            PayoutlinksCreatePayoutLinkRequest payoutlinksCreatePayoutLinkRequest = new PayoutlinksCreatePayoutLinkRequest();
            payoutlinksCreatePayoutLinkRequest.userId(this.userId);
            payoutlinksCreatePayoutLinkRequest.payee(this.payee);
            payoutlinksCreatePayoutLinkRequest.amount(this.amount);
            payoutlinksCreatePayoutLinkRequest.delivery(this.delivery);
            payoutlinksCreatePayoutLinkRequest.forceCollectComplianceInformation(this.forceCollectComplianceInformation);
            payoutlinksCreatePayoutLinkRequest.taxExempt(this.taxExempt);
            payoutlinksCreatePayoutLinkRequest.metadata(this.metadata);
            payoutlinksCreatePayoutLinkRequest.memo(this.memo);
            payoutlinksCreatePayoutLinkRequest.idempotencyKey(this.idempotencyKey);
            if (this.payoutFeeParty != null)
            payoutlinksCreatePayoutLinkRequest.payoutFeeParty(PayoutlinksCreatePayoutLinkRequest.PayoutFeePartyEnum.fromValue(this.payoutFeeParty));
            if (this.additionalSteps != null)
            payoutlinksCreatePayoutLinkRequest.additionalSteps(PayoutlinksCreatePayoutLinkRequest.AdditionalStepsEnum.fromValue(this.additionalSteps));
            return payoutlinksCreatePayoutLinkRequest;
        }

        /**
         * Execute createPayoutLink request
         * @return PayoutLink
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PayoutLink execute() throws ApiException {
            PayoutlinksCreatePayoutLinkRequest payoutlinksCreatePayoutLinkRequest = buildBodyParams();
            ApiResponse<PayoutLink> localVarResp = createPayoutLinkWithHttpInfo(payoutlinksCreatePayoutLinkRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPayoutLink request with HTTP info returned
         * @return ApiResponse&lt;PayoutLink&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayoutLink> executeWithHttpInfo() throws ApiException {
            PayoutlinksCreatePayoutLinkRequest payoutlinksCreatePayoutLinkRequest = buildBodyParams();
            return createPayoutLinkWithHttpInfo(payoutlinksCreatePayoutLinkRequest);
        }

        /**
         * Execute createPayoutLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayoutLink> _callback) throws ApiException {
            PayoutlinksCreatePayoutLinkRequest payoutlinksCreatePayoutLinkRequest = buildBodyParams();
            return createPayoutLinkAsync(payoutlinksCreatePayoutLinkRequest, _callback);
        }
    }

    /**
     * Create a Payout Link
     * Create a Payout Link.
     * @return CreatePayoutLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreatePayoutLinkRequestBuilder createPayoutLink(Integer amount) throws IllegalArgumentException {
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        return new CreatePayoutLinkRequestBuilder(amount);
    }
    private okhttp3.Call getPayoutLinkCall(String payoutLinkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/payout-links/{payout_link_id}"
            .replace("{" + "payout_link_id" + "}", localVarApiClient.escapeString(payoutLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayoutLinkValidateBeforeCall(String payoutLinkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payoutLinkId' is set
        if (payoutLinkId == null) {
            throw new ApiException("Missing the required parameter 'payoutLinkId' when calling getPayoutLink(Async)");
        }

        return getPayoutLinkCall(payoutLinkId, _callback);

    }


    private ApiResponse<PayoutLink> getPayoutLinkWithHttpInfo(String payoutLinkId) throws ApiException {
        okhttp3.Call localVarCall = getPayoutLinkValidateBeforeCall(payoutLinkId, null);
        Type localVarReturnType = new TypeToken<PayoutLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPayoutLinkAsync(String payoutLinkId, final ApiCallback<PayoutLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayoutLinkValidateBeforeCall(payoutLinkId, _callback);
        Type localVarReturnType = new TypeToken<PayoutLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPayoutLinkRequestBuilder {
        private final String payoutLinkId;

        private GetPayoutLinkRequestBuilder(String payoutLinkId) {
            this.payoutLinkId = payoutLinkId;
        }

        /**
         * Build call for getPayoutLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPayoutLinkCall(payoutLinkId, _callback);
        }


        /**
         * Execute getPayoutLink request
         * @return PayoutLink
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PayoutLink execute() throws ApiException {
            ApiResponse<PayoutLink> localVarResp = getPayoutLinkWithHttpInfo(payoutLinkId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPayoutLink request with HTTP info returned
         * @return ApiResponse&lt;PayoutLink&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayoutLink> executeWithHttpInfo() throws ApiException {
            return getPayoutLinkWithHttpInfo(payoutLinkId);
        }

        /**
         * Execute getPayoutLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayoutLink> _callback) throws ApiException {
            return getPayoutLinkAsync(payoutLinkId, _callback);
        }
    }

    /**
     * Retrieve a Payout Link
     * Get a payout link by its id.
     * @param payoutLinkId Id of the payout link (required)
     * @return GetPayoutLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetPayoutLinkRequestBuilder getPayoutLink(String payoutLinkId) throws IllegalArgumentException {
        if (payoutLinkId == null) throw new IllegalArgumentException("\"payoutLinkId\" is required but got null");
            

        return new GetPayoutLinkRequestBuilder(payoutLinkId);
    }
    private okhttp3.Call listAllCall(Integer limit, UUID startingAfter, UUID endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/payout-links";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(Integer limit, UUID startingAfter, UUID endingBefore, final ApiCallback _callback) throws ApiException {
        return listAllCall(limit, startingAfter, endingBefore, _callback);

    }


    private ApiResponse<PayoutlinksListAllResponse> listAllWithHttpInfo(Integer limit, UUID startingAfter, UUID endingBefore) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(limit, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<PayoutlinksListAllResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(Integer limit, UUID startingAfter, UUID endingBefore, final ApiCallback<PayoutlinksListAllResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(limit, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<PayoutlinksListAllResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private Integer limit;
        private UUID startingAfter;
        private UUID endingBefore;

        private ListAllRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit A limit on the number of objects to be returned, between 1 and 100. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set startingAfter
         * @param startingAfter A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;aaa&#x60;, your subsequent call can include &#x60;starting_after&#x60;&#x3D;&#x60;aaa&#x60; in order to fetch the next page of the list. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder startingAfter(UUID startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;aaa&#x60;, your subsequent call can include &#x60;ending_before&#x60;&#x3D;&#x60;aaa&#x60; in order to fetch the previous page of the list. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder endingBefore(UUID endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(limit, startingAfter, endingBefore, _callback);
        }


        /**
         * Execute listAll request
         * @return PayoutlinksListAllResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PayoutlinksListAllResponse execute() throws ApiException {
            ApiResponse<PayoutlinksListAllResponse> localVarResp = listAllWithHttpInfo(limit, startingAfter, endingBefore);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;PayoutlinksListAllResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayoutlinksListAllResponse> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(limit, startingAfter, endingBefore);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayoutlinksListAllResponse> _callback) throws ApiException {
            return listAllAsync(limit, startingAfter, endingBefore, _callback);
        }
    }

    /**
     * List all Payout Links
     * List all created Payout Links.
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
}
