/*
 * dots api
 * Scalable and Flexible Payouts Infrastructure
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@dots.dev
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Transfer;
import com.konfigthis.client.model.TransfersCreateOrganizationTransferRequest;
import com.konfigthis.client.model.TransfersCreateTransferRequest;
import com.konfigthis.client.model.TransfersGetAllResponse;
import com.konfigthis.client.model.TransfersListAllResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TransfersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransfersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TransfersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createOrganizationTransferCall(TransfersCreateOrganizationTransferRequest transfersCreateOrganizationTransferRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transfersCreateOrganizationTransferRequest;

        // create path and map variables
        String localVarPath = "/v2/organization-transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationTransferValidateBeforeCall(TransfersCreateOrganizationTransferRequest transfersCreateOrganizationTransferRequest, final ApiCallback _callback) throws ApiException {
        return createOrganizationTransferCall(transfersCreateOrganizationTransferRequest, _callback);

    }


    private ApiResponse<Transfer> createOrganizationTransferWithHttpInfo(TransfersCreateOrganizationTransferRequest transfersCreateOrganizationTransferRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationTransferValidateBeforeCall(transfersCreateOrganizationTransferRequest, null);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOrganizationTransferAsync(TransfersCreateOrganizationTransferRequest transfersCreateOrganizationTransferRequest, final ApiCallback<Transfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationTransferValidateBeforeCall(transfersCreateOrganizationTransferRequest, _callback);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOrganizationTransferRequestBuilder {
        private final Integer amount;
        private final UUID apiAppId;
        private UUID idempotencyKey;
        private Object metadata;

        private CreateOrganizationTransferRequestBuilder(Integer amount, UUID apiAppId) {
            this.amount = amount;
            this.apiAppId = apiAppId;
        }

        /**
         * Set idempotencyKey
         * @param idempotencyKey  (optional)
         * @return CreateOrganizationTransferRequestBuilder
         */
        public CreateOrganizationTransferRequestBuilder idempotencyKey(UUID idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. (optional)
         * @return CreateOrganizationTransferRequestBuilder
         */
        public CreateOrganizationTransferRequestBuilder metadata(Object metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Build call for createOrganizationTransfer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TransfersCreateOrganizationTransferRequest transfersCreateOrganizationTransferRequest = buildBodyParams();
            return createOrganizationTransferCall(transfersCreateOrganizationTransferRequest, _callback);
        }

        private TransfersCreateOrganizationTransferRequest buildBodyParams() {
            TransfersCreateOrganizationTransferRequest transfersCreateOrganizationTransferRequest = new TransfersCreateOrganizationTransferRequest();
            transfersCreateOrganizationTransferRequest.amount(this.amount);
            transfersCreateOrganizationTransferRequest.apiAppId(this.apiAppId);
            transfersCreateOrganizationTransferRequest.idempotencyKey(this.idempotencyKey);
            transfersCreateOrganizationTransferRequest.metadata(this.metadata);
            return transfersCreateOrganizationTransferRequest;
        }

        /**
         * Execute createOrganizationTransfer request
         * @return Transfer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public Transfer execute() throws ApiException {
            TransfersCreateOrganizationTransferRequest transfersCreateOrganizationTransferRequest = buildBodyParams();
            ApiResponse<Transfer> localVarResp = createOrganizationTransferWithHttpInfo(transfersCreateOrganizationTransferRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOrganizationTransfer request with HTTP info returned
         * @return ApiResponse&lt;Transfer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Transfer> executeWithHttpInfo() throws ApiException {
            TransfersCreateOrganizationTransferRequest transfersCreateOrganizationTransferRequest = buildBodyParams();
            return createOrganizationTransferWithHttpInfo(transfersCreateOrganizationTransferRequest);
        }

        /**
         * Execute createOrganizationTransfer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Transfer> _callback) throws ApiException {
            TransfersCreateOrganizationTransferRequest transfersCreateOrganizationTransferRequest = buildBodyParams();
            return createOrganizationTransferAsync(transfersCreateOrganizationTransferRequest, _callback);
        }
    }

    /**
     * Create an Organization Transfer
     * Create a transfer for the organization&#39;s wallet to an api app.
     * @return CreateOrganizationTransferRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateOrganizationTransferRequestBuilder createOrganizationTransfer(Integer amount, UUID apiAppId) throws IllegalArgumentException {
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (apiAppId == null) throw new IllegalArgumentException("\"apiAppId\" is required but got null");
            

        return new CreateOrganizationTransferRequestBuilder(amount, apiAppId);
    }
    private okhttp3.Call createTransferCall(TransfersCreateTransferRequest transfersCreateTransferRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transfersCreateTransferRequest;

        // create path and map variables
        String localVarPath = "/v2/transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTransferValidateBeforeCall(TransfersCreateTransferRequest transfersCreateTransferRequest, final ApiCallback _callback) throws ApiException {
        return createTransferCall(transfersCreateTransferRequest, _callback);

    }


    private ApiResponse<Transfer> createTransferWithHttpInfo(TransfersCreateTransferRequest transfersCreateTransferRequest) throws ApiException {
        okhttp3.Call localVarCall = createTransferValidateBeforeCall(transfersCreateTransferRequest, null);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTransferAsync(TransfersCreateTransferRequest transfersCreateTransferRequest, final ApiCallback<Transfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTransferValidateBeforeCall(transfersCreateTransferRequest, _callback);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTransferRequestBuilder {
        private final Integer amount;
        private final UUID userId;
        private Object taxExempt;
        private Object idempotencyKey;
        private Object metadata;

        private CreateTransferRequestBuilder(Integer amount, UUID userId) {
            this.amount = amount;
            this.userId = userId;
        }

        /**
         * Set taxExempt
         * @param taxExempt Transfers marked as &#x60;tax_exempt&#x60; will not be counted towards the 1099 threshold. (optional)
         * @return CreateTransferRequestBuilder
         */
        public CreateTransferRequestBuilder taxExempt(Object taxExempt) {
            this.taxExempt = taxExempt;
            return this;
        }
        
        /**
         * Set idempotencyKey
         * @param idempotencyKey UUID that will be used to idempotently handle requests. Transfers with existing idempotency keys will be rejected. (optional)
         * @return CreateTransferRequestBuilder
         */
        public CreateTransferRequestBuilder idempotencyKey(Object idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. (optional)
         * @return CreateTransferRequestBuilder
         */
        public CreateTransferRequestBuilder metadata(Object metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Build call for createTransfer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TransfersCreateTransferRequest transfersCreateTransferRequest = buildBodyParams();
            return createTransferCall(transfersCreateTransferRequest, _callback);
        }

        private TransfersCreateTransferRequest buildBodyParams() {
            TransfersCreateTransferRequest transfersCreateTransferRequest = new TransfersCreateTransferRequest();
            transfersCreateTransferRequest.amount(this.amount);
            transfersCreateTransferRequest.userId(this.userId);
            transfersCreateTransferRequest.taxExempt(this.taxExempt);
            transfersCreateTransferRequest.idempotencyKey(this.idempotencyKey);
            transfersCreateTransferRequest.metadata(this.metadata);
            return transfersCreateTransferRequest;
        }

        /**
         * Execute createTransfer request
         * @return Transfer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public Transfer execute() throws ApiException {
            TransfersCreateTransferRequest transfersCreateTransferRequest = buildBodyParams();
            ApiResponse<Transfer> localVarResp = createTransferWithHttpInfo(transfersCreateTransferRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTransfer request with HTTP info returned
         * @return ApiResponse&lt;Transfer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Transfer> executeWithHttpInfo() throws ApiException {
            TransfersCreateTransferRequest transfersCreateTransferRequest = buildBodyParams();
            return createTransferWithHttpInfo(transfersCreateTransferRequest);
        }

        /**
         * Execute createTransfer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Transfer> _callback) throws ApiException {
            TransfersCreateTransferRequest transfersCreateTransferRequest = buildBodyParams();
            return createTransferAsync(transfersCreateTransferRequest, _callback);
        }
    }

    /**
     * Create a Transfer
     * Create a transfer.
     * @return CreateTransferRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateTransferRequestBuilder createTransfer(Integer amount, UUID userId) throws IllegalArgumentException {
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new CreateTransferRequestBuilder(amount, userId);
    }
    private okhttp3.Call getAllCall(Integer limit, UUID startingAfter, UUID endingBefore, UUID userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/organization-transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(Integer limit, UUID startingAfter, UUID endingBefore, UUID userId, final ApiCallback _callback) throws ApiException {
        return getAllCall(limit, startingAfter, endingBefore, userId, _callback);

    }


    private ApiResponse<TransfersGetAllResponse> getAllWithHttpInfo(Integer limit, UUID startingAfter, UUID endingBefore, UUID userId) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(limit, startingAfter, endingBefore, userId, null);
        Type localVarReturnType = new TypeToken<TransfersGetAllResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(Integer limit, UUID startingAfter, UUID endingBefore, UUID userId, final ApiCallback<TransfersGetAllResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(limit, startingAfter, endingBefore, userId, _callback);
        Type localVarReturnType = new TypeToken<TransfersGetAllResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private Integer limit;
        private UUID startingAfter;
        private UUID endingBefore;
        private UUID userId;

        private GetAllRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit A limit on the number of objects to be returned, between 1 and 100. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set startingAfter
         * @param startingAfter A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;aaa&#x60;, your subsequent call can include &#x60;starting_after&#x60;&#x3D;&#x60;aaa&#x60; in order to fetch the next page of the list. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder startingAfter(UUID startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;aaa&#x60;, your subsequent call can include &#x60;ending_before&#x60;&#x3D;&#x60;aaa&#x60; in order to fetch the previous page of the list. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder endingBefore(UUID endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Set userId
         * @param userId Include only results with this user ID attached. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder userId(UUID userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(limit, startingAfter, endingBefore, userId, _callback);
        }


        /**
         * Execute getAll request
         * @return TransfersGetAllResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TransfersGetAllResponse execute() throws ApiException {
            ApiResponse<TransfersGetAllResponse> localVarResp = getAllWithHttpInfo(limit, startingAfter, endingBefore, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;TransfersGetAllResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransfersGetAllResponse> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(limit, startingAfter, endingBefore, userId);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransfersGetAllResponse> _callback) throws ApiException {
            return getAllAsync(limit, startingAfter, endingBefore, userId, _callback);
        }
    }

    /**
     * List all Organization Transfers
     * List all transfers to and from an Organization&#39;s wallet.
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll() throws IllegalArgumentException {
        return new GetAllRequestBuilder();
    }
    private okhttp3.Call getByIdCall(UUID transferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/transfers/{transfer_id}"
            .replace("{" + "transfer_id" + "}", localVarApiClient.escapeString(transferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(UUID transferId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferId' is set
        if (transferId == null) {
            throw new ApiException("Missing the required parameter 'transferId' when calling getById(Async)");
        }

        return getByIdCall(transferId, _callback);

    }


    private ApiResponse<Transfer> getByIdWithHttpInfo(UUID transferId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(transferId, null);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(UUID transferId, final ApiCallback<Transfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(transferId, _callback);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final UUID transferId;

        private GetByIdRequestBuilder(UUID transferId) {
            this.transferId = transferId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(transferId, _callback);
        }


        /**
         * Execute getById request
         * @return Transfer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public Transfer execute() throws ApiException {
            ApiResponse<Transfer> localVarResp = getByIdWithHttpInfo(transferId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Transfer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Transfer> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(transferId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Transfer> _callback) throws ApiException {
            return getByIdAsync(transferId, _callback);
        }
    }

    /**
     * Get a Transfer
     * Get a transfer by its id.
     * @param transferId Id of the transfer to fetch (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(UUID transferId) throws IllegalArgumentException {
        if (transferId == null) throw new IllegalArgumentException("\"transferId\" is required but got null");
            

        return new GetByIdRequestBuilder(transferId);
    }
    private okhttp3.Call getById_0Call(String transferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/organization-transfers/{transfer_id}"
            .replace("{" + "transfer_id" + "}", localVarApiClient.escapeString(transferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getById_0ValidateBeforeCall(String transferId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferId' is set
        if (transferId == null) {
            throw new ApiException("Missing the required parameter 'transferId' when calling getById_0(Async)");
        }

        return getById_0Call(transferId, _callback);

    }


    private ApiResponse<Transfer> getById_0WithHttpInfo(String transferId) throws ApiException {
        okhttp3.Call localVarCall = getById_0ValidateBeforeCall(transferId, null);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getById_0Async(String transferId, final ApiCallback<Transfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getById_0ValidateBeforeCall(transferId, _callback);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetById0RequestBuilder {
        private final String transferId;

        private GetById0RequestBuilder(String transferId) {
            this.transferId = transferId;
        }

        /**
         * Build call for getById_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getById_0Call(transferId, _callback);
        }


        /**
         * Execute getById_0 request
         * @return Transfer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public Transfer execute() throws ApiException {
            ApiResponse<Transfer> localVarResp = getById_0WithHttpInfo(transferId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById_0 request with HTTP info returned
         * @return ApiResponse&lt;Transfer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Transfer> executeWithHttpInfo() throws ApiException {
            return getById_0WithHttpInfo(transferId);
        }

        /**
         * Execute getById_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Transfer> _callback) throws ApiException {
            return getById_0Async(transferId, _callback);
        }
    }

    /**
     * Get a Transfer
     * Get a transfer by its id.
     * @param transferId ID of the transfer to retrieve (required)
     * @return GetById0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetById0RequestBuilder getById_0(String transferId) throws IllegalArgumentException {
        if (transferId == null) throw new IllegalArgumentException("\"transferId\" is required but got null");
            

        return new GetById0RequestBuilder(transferId);
    }
    private okhttp3.Call listAllCall(Integer limit, UUID startingAfter, UUID endingBefore, UUID userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(Integer limit, UUID startingAfter, UUID endingBefore, UUID userId, final ApiCallback _callback) throws ApiException {
        return listAllCall(limit, startingAfter, endingBefore, userId, _callback);

    }


    private ApiResponse<TransfersListAllResponse> listAllWithHttpInfo(Integer limit, UUID startingAfter, UUID endingBefore, UUID userId) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(limit, startingAfter, endingBefore, userId, null);
        Type localVarReturnType = new TypeToken<TransfersListAllResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(Integer limit, UUID startingAfter, UUID endingBefore, UUID userId, final ApiCallback<TransfersListAllResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(limit, startingAfter, endingBefore, userId, _callback);
        Type localVarReturnType = new TypeToken<TransfersListAllResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private Integer limit;
        private UUID startingAfter;
        private UUID endingBefore;
        private UUID userId;

        private ListAllRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit A limit on the number of objects to be returned, between 1 and 100. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set startingAfter
         * @param startingAfter A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;aaa&#x60;, your subsequent call can include &#x60;starting_after&#x60;&#x3D;&#x60;aaa&#x60; in order to fetch the next page of the list. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder startingAfter(UUID startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;aaa&#x60;, your subsequent call can include &#x60;ending_before&#x60;&#x3D;&#x60;aaa&#x60; in order to fetch the previous page of the list. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder endingBefore(UUID endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Set userId
         * @param userId Include only results with this user ID attached. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder userId(UUID userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(limit, startingAfter, endingBefore, userId, _callback);
        }


        /**
         * Execute listAll request
         * @return TransfersListAllResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TransfersListAllResponse execute() throws ApiException {
            ApiResponse<TransfersListAllResponse> localVarResp = listAllWithHttpInfo(limit, startingAfter, endingBefore, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;TransfersListAllResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransfersListAllResponse> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(limit, startingAfter, endingBefore, userId);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransfersListAllResponse> _callback) throws ApiException {
            return listAllAsync(limit, startingAfter, endingBefore, userId, _callback);
        }
    }

    /**
     * List all Transfers
     * List all transfers.
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
}
