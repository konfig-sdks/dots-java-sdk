/*
 * dots api
 * Scalable and Flexible Payouts Infrastructure
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@dots.dev
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PaymentMethod;
import java.util.UUID;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.UsersAddPayoutMethodRequest;
import com.konfigthis.client.model.UsersCreateNewUserRequest;
import com.konfigthis.client.model.UsersListAllUsersResponse;
import com.konfigthis.client.model.UsersSendVerificationTokenRequest;
import com.konfigthis.client.model.UsersSubmitComplianceInfoRequest;
import com.konfigthis.client.model.UsersSubmitComplianceInfoRequestW8ben;
import com.konfigthis.client.model.UsersSubmitComplianceInfoRequestW9;
import com.konfigthis.client.model.UsersUpdateUserObjectRequest;
import com.konfigthis.client.model.UsersVerifyUserTokenRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addPayoutMethodCall(UUID userId, UsersAddPayoutMethodRequest usersAddPayoutMethodRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersAddPayoutMethodRequest;

        // create path and map variables
        String localVarPath = "/v2/users/{user_id}/payout-methods"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPayoutMethodValidateBeforeCall(UUID userId, UsersAddPayoutMethodRequest usersAddPayoutMethodRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addPayoutMethod(Async)");
        }

        return addPayoutMethodCall(userId, usersAddPayoutMethodRequest, _callback);

    }


    private ApiResponse<PaymentMethod> addPayoutMethodWithHttpInfo(UUID userId, UsersAddPayoutMethodRequest usersAddPayoutMethodRequest) throws ApiException {
        okhttp3.Call localVarCall = addPayoutMethodValidateBeforeCall(userId, usersAddPayoutMethodRequest, null);
        Type localVarReturnType = new TypeToken<PaymentMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addPayoutMethodAsync(UUID userId, UsersAddPayoutMethodRequest usersAddPayoutMethodRequest, final ApiCallback<PaymentMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPayoutMethodValidateBeforeCall(userId, usersAddPayoutMethodRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddPayoutMethodRequestBuilder {
        private final String platform;
        private final UUID userId;
        private String routingNumber;
        private String accountNumber;
        private String accountType;
        private String email;
        private String phoneNumber;
        private String handle;
        private String cashTag;

        private AddPayoutMethodRequestBuilder(String platform, UUID userId) {
            this.platform = platform;
            this.userId = userId;
        }

        /**
         * Set routingNumber
         * @param routingNumber Bank account or Cash App routing number. Required if &#x60;platform&#x60; &#x3D; &#x60;ach&#x60; or &#x60;cash_app&#x60;. (optional)
         * @return AddPayoutMethodRequestBuilder
         */
        public AddPayoutMethodRequestBuilder routingNumber(String routingNumber) {
            this.routingNumber = routingNumber;
            return this;
        }
        
        /**
         * Set accountNumber
         * @param accountNumber Bank account or Cash App account number. Required if &#x60;platform&#x60; &#x3D; &#x60;ach&#x60; or &#x60;cash_app&#x60;. (optional)
         * @return AddPayoutMethodRequestBuilder
         */
        public AddPayoutMethodRequestBuilder accountNumber(String accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }
        
        /**
         * Set accountType
         * @param accountType Bank account type. Required if &#x60;platform&#x60; &#x3D; &#x60;ach&#x60;. (optional)
         * @return AddPayoutMethodRequestBuilder
         */
        public AddPayoutMethodRequestBuilder accountType(String accountType) {
            this.accountType = accountType;
            return this;
        }
        
        /**
         * Set email
         * @param email PayPal email address. Required if &#x60;platform&#x60; &#x3D; &#x60;paypal&#x60;. (optional)
         * @return AddPayoutMethodRequestBuilder
         */
        public AddPayoutMethodRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set phoneNumber
         * @param phoneNumber Venmo phone number. One of &#x60;phone_number&#x60; or &#x60;handle&#x60; is required if &#x60;platform&#x60; &#x3D; &#x60;venmo&#x60;. (optional)
         * @return AddPayoutMethodRequestBuilder
         */
        public AddPayoutMethodRequestBuilder phoneNumber(String phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }
        
        /**
         * Set handle
         * @param handle Venmo handle. One of &#x60;phone_number&#x60; or &#x60;handle&#x60; is required if &#x60;platform&#x60; &#x3D; &#x60;venmo&#x60;. (optional)
         * @return AddPayoutMethodRequestBuilder
         */
        public AddPayoutMethodRequestBuilder handle(String handle) {
            this.handle = handle;
            return this;
        }
        
        /**
         * Set cashTag
         * @param cashTag Cash App Cash Tag. Required if &#x60;platform&#x60; &#x3D; &#x60;cash_app&#x60;. (optional)
         * @return AddPayoutMethodRequestBuilder
         */
        public AddPayoutMethodRequestBuilder cashTag(String cashTag) {
            this.cashTag = cashTag;
            return this;
        }
        
        /**
         * Build call for addPayoutMethod
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersAddPayoutMethodRequest usersAddPayoutMethodRequest = buildBodyParams();
            return addPayoutMethodCall(userId, usersAddPayoutMethodRequest, _callback);
        }

        private UsersAddPayoutMethodRequest buildBodyParams() {
            UsersAddPayoutMethodRequest usersAddPayoutMethodRequest = new UsersAddPayoutMethodRequest();
            if (this.platform != null)
            usersAddPayoutMethodRequest.platform(UsersAddPayoutMethodRequest.PlatformEnum.fromValue(this.platform));
            usersAddPayoutMethodRequest.routingNumber(this.routingNumber);
            usersAddPayoutMethodRequest.accountNumber(this.accountNumber);
            if (this.accountType != null)
            usersAddPayoutMethodRequest.accountType(UsersAddPayoutMethodRequest.AccountTypeEnum.fromValue(this.accountType));
            usersAddPayoutMethodRequest.email(this.email);
            usersAddPayoutMethodRequest.phoneNumber(this.phoneNumber);
            usersAddPayoutMethodRequest.handle(this.handle);
            usersAddPayoutMethodRequest.cashTag(this.cashTag);
            return usersAddPayoutMethodRequest;
        }

        /**
         * Execute addPayoutMethod request
         * @return PaymentMethod
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PaymentMethod execute() throws ApiException {
            UsersAddPayoutMethodRequest usersAddPayoutMethodRequest = buildBodyParams();
            ApiResponse<PaymentMethod> localVarResp = addPayoutMethodWithHttpInfo(userId, usersAddPayoutMethodRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addPayoutMethod request with HTTP info returned
         * @return ApiResponse&lt;PaymentMethod&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentMethod> executeWithHttpInfo() throws ApiException {
            UsersAddPayoutMethodRequest usersAddPayoutMethodRequest = buildBodyParams();
            return addPayoutMethodWithHttpInfo(userId, usersAddPayoutMethodRequest);
        }

        /**
         * Execute addPayoutMethod request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentMethod> _callback) throws ApiException {
            UsersAddPayoutMethodRequest usersAddPayoutMethodRequest = buildBodyParams();
            return addPayoutMethodAsync(userId, usersAddPayoutMethodRequest, _callback);
        }
    }

    /**
     * Add a Payout Method
     * Add a payout method to the user. Payout method can be one of &#x60;paypal&#x60;, &#x60;venmo&#x60;, &#x60;ach&#x60;, or &#x60;cash_app&#x60;. Each method has different required parameters.
     * @param userId Id of the user to fetch (required)
     * @return AddPayoutMethodRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AddPayoutMethodRequestBuilder addPayoutMethod(String platform, UUID userId) throws IllegalArgumentException {
        if (platform == null) throw new IllegalArgumentException("\"platform\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new AddPayoutMethodRequestBuilder(platform, userId);
    }
    private okhttp3.Call createNewUserCall(UsersCreateNewUserRequest usersCreateNewUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersCreateNewUserRequest;

        // create path and map variables
        String localVarPath = "/v2/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewUserValidateBeforeCall(UsersCreateNewUserRequest usersCreateNewUserRequest, final ApiCallback _callback) throws ApiException {
        return createNewUserCall(usersCreateNewUserRequest, _callback);

    }


    private ApiResponse<User> createNewUserWithHttpInfo(UsersCreateNewUserRequest usersCreateNewUserRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewUserValidateBeforeCall(usersCreateNewUserRequest, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewUserAsync(UsersCreateNewUserRequest usersCreateNewUserRequest, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewUserValidateBeforeCall(usersCreateNewUserRequest, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewUserRequestBuilder {
        private final String firstName;
        private final String lastName;
        private final String email;
        private final String countryCode;
        private final String phoneNumber;
        private String username;
        private Object metadata;

        private CreateNewUserRequestBuilder(String firstName, String lastName, String email, String countryCode, String phoneNumber) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.email = email;
            this.countryCode = countryCode;
            this.phoneNumber = phoneNumber;
        }

        /**
         * Set username
         * @param username Username to assign the user. (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. (optional)
         * @return CreateNewUserRequestBuilder
         */
        public CreateNewUserRequestBuilder metadata(Object metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Build call for createNewUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersCreateNewUserRequest usersCreateNewUserRequest = buildBodyParams();
            return createNewUserCall(usersCreateNewUserRequest, _callback);
        }

        private UsersCreateNewUserRequest buildBodyParams() {
            UsersCreateNewUserRequest usersCreateNewUserRequest = new UsersCreateNewUserRequest();
            usersCreateNewUserRequest.firstName(this.firstName);
            usersCreateNewUserRequest.lastName(this.lastName);
            usersCreateNewUserRequest.email(this.email);
            usersCreateNewUserRequest.countryCode(this.countryCode);
            usersCreateNewUserRequest.phoneNumber(this.phoneNumber);
            usersCreateNewUserRequest.username(this.username);
            usersCreateNewUserRequest.metadata(this.metadata);
            return usersCreateNewUserRequest;
        }

        /**
         * Execute createNewUser request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public User execute() throws ApiException {
            UsersCreateNewUserRequest usersCreateNewUserRequest = buildBodyParams();
            ApiResponse<User> localVarResp = createNewUserWithHttpInfo(usersCreateNewUserRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewUser request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            UsersCreateNewUserRequest usersCreateNewUserRequest = buildBodyParams();
            return createNewUserWithHttpInfo(usersCreateNewUserRequest);
        }

        /**
         * Execute createNewUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            UsersCreateNewUserRequest usersCreateNewUserRequest = buildBodyParams();
            return createNewUserAsync(usersCreateNewUserRequest, _callback);
        }
    }

    /**
     * Create a User
     * Create a user.
     * @return CreateNewUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewUserRequestBuilder createNewUser(String firstName, String lastName, String email, String countryCode, String phoneNumber) throws IllegalArgumentException {
        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            

        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (countryCode == null) throw new IllegalArgumentException("\"countryCode\" is required but got null");
            

        if (phoneNumber == null) throw new IllegalArgumentException("\"phoneNumber\" is required but got null");
            

        return new CreateNewUserRequestBuilder(firstName, lastName, email, countryCode, phoneNumber);
    }
    private okhttp3.Call getUserByIdCall(UUID userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/users/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserByIdValidateBeforeCall(UUID userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserById(Async)");
        }

        return getUserByIdCall(userId, _callback);

    }


    private ApiResponse<User> getUserByIdWithHttpInfo(UUID userId) throws ApiException {
        okhttp3.Call localVarCall = getUserByIdValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserByIdAsync(UUID userId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserByIdValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserByIdRequestBuilder {
        private final UUID userId;

        private GetUserByIdRequestBuilder(UUID userId) {
            this.userId = userId;
        }

        /**
         * Build call for getUserById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserByIdCall(userId, _callback);
        }


        /**
         * Execute getUserById request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public User execute() throws ApiException {
            ApiResponse<User> localVarResp = getUserByIdWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserById request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            return getUserByIdWithHttpInfo(userId);
        }

        /**
         * Execute getUserById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            return getUserByIdAsync(userId, _callback);
        }
    }

    /**
     * Retrieve a User
     * Get a user by their id.
     * @param userId Id of the user to fetch (required)
     * @return GetUserByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetUserByIdRequestBuilder getUserById(UUID userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new GetUserByIdRequestBuilder(userId);
    }
    private okhttp3.Call listAllUsersCall(UUID startingAfter, Integer limit, UUID endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllUsersValidateBeforeCall(UUID startingAfter, Integer limit, UUID endingBefore, final ApiCallback _callback) throws ApiException {
        return listAllUsersCall(startingAfter, limit, endingBefore, _callback);

    }


    private ApiResponse<UsersListAllUsersResponse> listAllUsersWithHttpInfo(UUID startingAfter, Integer limit, UUID endingBefore) throws ApiException {
        okhttp3.Call localVarCall = listAllUsersValidateBeforeCall(startingAfter, limit, endingBefore, null);
        Type localVarReturnType = new TypeToken<UsersListAllUsersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllUsersAsync(UUID startingAfter, Integer limit, UUID endingBefore, final ApiCallback<UsersListAllUsersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllUsersValidateBeforeCall(startingAfter, limit, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<UsersListAllUsersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllUsersRequestBuilder {
        private UUID startingAfter;
        private Integer limit;
        private UUID endingBefore;

        private ListAllUsersRequestBuilder() {
        }

        /**
         * Set startingAfter
         * @param startingAfter A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;aaa&#x60;, your subsequent call can include &#x60;starting_after&#x60;&#x3D;&#x60;aaa&#x60; in order to fetch the next page of the list. (optional)
         * @return ListAllUsersRequestBuilder
         */
        public ListAllUsersRequestBuilder startingAfter(UUID startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set limit
         * @param limit A limit on the number of objects to be returned, between 1 and 100. (optional)
         * @return ListAllUsersRequestBuilder
         */
        public ListAllUsersRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;aaa&#x60;, your subsequent call can include &#x60;ending_before&#x60;&#x3D;&#x60;aaa&#x60; in order to fetch the previous page of the list. (optional)
         * @return ListAllUsersRequestBuilder
         */
        public ListAllUsersRequestBuilder endingBefore(UUID endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Build call for listAllUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllUsersCall(startingAfter, limit, endingBefore, _callback);
        }


        /**
         * Execute listAllUsers request
         * @return UsersListAllUsersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public UsersListAllUsersResponse execute() throws ApiException {
            ApiResponse<UsersListAllUsersResponse> localVarResp = listAllUsersWithHttpInfo(startingAfter, limit, endingBefore);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllUsers request with HTTP info returned
         * @return ApiResponse&lt;UsersListAllUsersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersListAllUsersResponse> executeWithHttpInfo() throws ApiException {
            return listAllUsersWithHttpInfo(startingAfter, limit, endingBefore);
        }

        /**
         * Execute listAllUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersListAllUsersResponse> _callback) throws ApiException {
            return listAllUsersAsync(startingAfter, limit, endingBefore, _callback);
        }
    }

    /**
     * List all Users
     * List all users connected to your application.
     * @return ListAllUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListAllUsersRequestBuilder listAllUsers() throws IllegalArgumentException {
        return new ListAllUsersRequestBuilder();
    }
    private okhttp3.Call listPayoutMethodsCall(UUID userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/users/{user_id}/payout-methods"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPayoutMethodsValidateBeforeCall(UUID userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listPayoutMethods(Async)");
        }

        return listPayoutMethodsCall(userId, _callback);

    }


    private ApiResponse<List<PaymentMethod>> listPayoutMethodsWithHttpInfo(UUID userId) throws ApiException {
        okhttp3.Call localVarCall = listPayoutMethodsValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<List<PaymentMethod>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPayoutMethodsAsync(UUID userId, final ApiCallback<List<PaymentMethod>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPayoutMethodsValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<List<PaymentMethod>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPayoutMethodsRequestBuilder {
        private final UUID userId;

        private ListPayoutMethodsRequestBuilder(UUID userId) {
            this.userId = userId;
        }

        /**
         * Build call for listPayoutMethods
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPayoutMethodsCall(userId, _callback);
        }


        /**
         * Execute listPayoutMethods request
         * @return List&lt;PaymentMethod&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public List<PaymentMethod> execute() throws ApiException {
            ApiResponse<List<PaymentMethod>> localVarResp = listPayoutMethodsWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPayoutMethods request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PaymentMethod&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PaymentMethod>> executeWithHttpInfo() throws ApiException {
            return listPayoutMethodsWithHttpInfo(userId);
        }

        /**
         * Execute listPayoutMethods request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PaymentMethod>> _callback) throws ApiException {
            return listPayoutMethodsAsync(userId, _callback);
        }
    }

    /**
     * List Payout Methods
     * Get a user&#39;s connected payout methods.
     * @param userId Id of the user to fetch (required)
     * @return ListPayoutMethodsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListPayoutMethodsRequestBuilder listPayoutMethods(UUID userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ListPayoutMethodsRequestBuilder(userId);
    }
    private okhttp3.Call removeUserCall(UUID userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/users/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUserValidateBeforeCall(UUID userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeUser(Async)");
        }

        return removeUserCall(userId, _callback);

    }


    private ApiResponse<User> removeUserWithHttpInfo(UUID userId) throws ApiException {
        okhttp3.Call localVarCall = removeUserValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeUserAsync(UUID userId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeUserValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveUserRequestBuilder {
        private final UUID userId;

        private RemoveUserRequestBuilder(UUID userId) {
            this.userId = userId;
        }

        /**
         * Build call for removeUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeUserCall(userId, _callback);
        }


        /**
         * Execute removeUser request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public User execute() throws ApiException {
            ApiResponse<User> localVarResp = removeUserWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeUser request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            return removeUserWithHttpInfo(userId);
        }

        /**
         * Execute removeUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            return removeUserAsync(userId, _callback);
        }
    }

    /**
     * Delete a User
     * Delete a user.
     * @param userId Id of the user to fetch (required)
     * @return RemoveUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RemoveUserRequestBuilder removeUser(UUID userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new RemoveUserRequestBuilder(userId);
    }
    private okhttp3.Call sendVerificationTokenCall(String userId, UsersSendVerificationTokenRequest usersSendVerificationTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersSendVerificationTokenRequest;

        // create path and map variables
        String localVarPath = "/v2/users/{user_id}/send-verification-token"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendVerificationTokenValidateBeforeCall(String userId, UsersSendVerificationTokenRequest usersSendVerificationTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling sendVerificationToken(Async)");
        }

        return sendVerificationTokenCall(userId, usersSendVerificationTokenRequest, _callback);

    }


    private ApiResponse<Void> sendVerificationTokenWithHttpInfo(String userId, UsersSendVerificationTokenRequest usersSendVerificationTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = sendVerificationTokenValidateBeforeCall(userId, usersSendVerificationTokenRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call sendVerificationTokenAsync(String userId, UsersSendVerificationTokenRequest usersSendVerificationTokenRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendVerificationTokenValidateBeforeCall(userId, usersSendVerificationTokenRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SendVerificationTokenRequestBuilder {
        private final String userId;
        private Boolean useVoice;

        private SendVerificationTokenRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set useVoice
         * @param useVoice Defaults to &#x60;false&#x60; which sends token via SMS. Set &#x60;true&#x60; to receive via call instead. (optional, default to false)
         * @return SendVerificationTokenRequestBuilder
         */
        public SendVerificationTokenRequestBuilder useVoice(Boolean useVoice) {
            this.useVoice = useVoice;
            return this;
        }
        
        /**
         * Build call for sendVerificationToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersSendVerificationTokenRequest usersSendVerificationTokenRequest = buildBodyParams();
            return sendVerificationTokenCall(userId, usersSendVerificationTokenRequest, _callback);
        }

        private UsersSendVerificationTokenRequest buildBodyParams() {
            UsersSendVerificationTokenRequest usersSendVerificationTokenRequest = new UsersSendVerificationTokenRequest();
            usersSendVerificationTokenRequest.useVoice(this.useVoice);
            return usersSendVerificationTokenRequest;
        }

        /**
         * Execute sendVerificationToken request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UsersSendVerificationTokenRequest usersSendVerificationTokenRequest = buildBodyParams();
            sendVerificationTokenWithHttpInfo(userId, usersSendVerificationTokenRequest);
        }

        /**
         * Execute sendVerificationToken request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UsersSendVerificationTokenRequest usersSendVerificationTokenRequest = buildBodyParams();
            return sendVerificationTokenWithHttpInfo(userId, usersSendVerificationTokenRequest);
        }

        /**
         * Execute sendVerificationToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UsersSendVerificationTokenRequest usersSendVerificationTokenRequest = buildBodyParams();
            return sendVerificationTokenAsync(userId, usersSendVerificationTokenRequest, _callback);
        }
    }

    /**
     * Send a Verification Token
     * Send a user a verification token.
     * @param userId Id of the user to fetch (required)
     * @return SendVerificationTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public SendVerificationTokenRequestBuilder sendVerificationToken(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new SendVerificationTokenRequestBuilder(userId);
    }
    private okhttp3.Call submitComplianceInfoCall(String userId, UsersSubmitComplianceInfoRequest usersSubmitComplianceInfoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersSubmitComplianceInfoRequest;

        // create path and map variables
        String localVarPath = "/v2/users/{user_id}/compliance"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitComplianceInfoValidateBeforeCall(String userId, UsersSubmitComplianceInfoRequest usersSubmitComplianceInfoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling submitComplianceInfo(Async)");
        }

        return submitComplianceInfoCall(userId, usersSubmitComplianceInfoRequest, _callback);

    }


    private ApiResponse<Void> submitComplianceInfoWithHttpInfo(String userId, UsersSubmitComplianceInfoRequest usersSubmitComplianceInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = submitComplianceInfoValidateBeforeCall(userId, usersSubmitComplianceInfoRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call submitComplianceInfoAsync(String userId, UsersSubmitComplianceInfoRequest usersSubmitComplianceInfoRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitComplianceInfoValidateBeforeCall(userId, usersSubmitComplianceInfoRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SubmitComplianceInfoRequestBuilder {
        private final String userId;
        private UsersSubmitComplianceInfoRequestW9 w9;
        private UsersSubmitComplianceInfoRequestW8ben w8ben;

        private SubmitComplianceInfoRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set w9
         * @param w9  (optional)
         * @return SubmitComplianceInfoRequestBuilder
         */
        public SubmitComplianceInfoRequestBuilder w9(UsersSubmitComplianceInfoRequestW9 w9) {
            this.w9 = w9;
            return this;
        }
        
        /**
         * Set w8ben
         * @param w8ben  (optional)
         * @return SubmitComplianceInfoRequestBuilder
         */
        public SubmitComplianceInfoRequestBuilder w8ben(UsersSubmitComplianceInfoRequestW8ben w8ben) {
            this.w8ben = w8ben;
            return this;
        }
        
        /**
         * Build call for submitComplianceInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersSubmitComplianceInfoRequest usersSubmitComplianceInfoRequest = buildBodyParams();
            return submitComplianceInfoCall(userId, usersSubmitComplianceInfoRequest, _callback);
        }

        private UsersSubmitComplianceInfoRequest buildBodyParams() {
            UsersSubmitComplianceInfoRequest usersSubmitComplianceInfoRequest = new UsersSubmitComplianceInfoRequest();
            usersSubmitComplianceInfoRequest.w9(this.w9);
            usersSubmitComplianceInfoRequest.w8ben(this.w8ben);
            return usersSubmitComplianceInfoRequest;
        }

        /**
         * Execute submitComplianceInfo request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UsersSubmitComplianceInfoRequest usersSubmitComplianceInfoRequest = buildBodyParams();
            submitComplianceInfoWithHttpInfo(userId, usersSubmitComplianceInfoRequest);
        }

        /**
         * Execute submitComplianceInfo request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UsersSubmitComplianceInfoRequest usersSubmitComplianceInfoRequest = buildBodyParams();
            return submitComplianceInfoWithHttpInfo(userId, usersSubmitComplianceInfoRequest);
        }

        /**
         * Execute submitComplianceInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UsersSubmitComplianceInfoRequest usersSubmitComplianceInfoRequest = buildBodyParams();
            return submitComplianceInfoAsync(userId, usersSubmitComplianceInfoRequest, _callback);
        }
    }

    /**
     * Submit Compliance Information
     * Add Compliance information to a user.
     * @param userId Id of the user to fetch (required)
     * @return SubmitComplianceInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SubmitComplianceInfoRequestBuilder submitComplianceInfo(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new SubmitComplianceInfoRequestBuilder(userId);
    }
    private okhttp3.Call updateUserObjectCall(UUID userId, UsersUpdateUserObjectRequest usersUpdateUserObjectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersUpdateUserObjectRequest;

        // create path and map variables
        String localVarPath = "/v2/users/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserObjectValidateBeforeCall(UUID userId, UsersUpdateUserObjectRequest usersUpdateUserObjectRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUserObject(Async)");
        }

        return updateUserObjectCall(userId, usersUpdateUserObjectRequest, _callback);

    }


    private ApiResponse<User> updateUserObjectWithHttpInfo(UUID userId, UsersUpdateUserObjectRequest usersUpdateUserObjectRequest) throws ApiException {
        okhttp3.Call localVarCall = updateUserObjectValidateBeforeCall(userId, usersUpdateUserObjectRequest, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateUserObjectAsync(UUID userId, UsersUpdateUserObjectRequest usersUpdateUserObjectRequest, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserObjectValidateBeforeCall(userId, usersUpdateUserObjectRequest, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateUserObjectRequestBuilder {
        private final UUID userId;
        private String defaultPayoutMethod;
        private Boolean autoPayoutEnabled;
        private Object metadata;

        private UpdateUserObjectRequestBuilder(UUID userId) {
            this.userId = userId;
        }

        /**
         * Set defaultPayoutMethod
         * @param defaultPayoutMethod Configures the user&#39;s default payout method. Must be a payout method already configured by the user. (optional)
         * @return UpdateUserObjectRequestBuilder
         */
        public UpdateUserObjectRequestBuilder defaultPayoutMethod(String defaultPayoutMethod) {
            this.defaultPayoutMethod = defaultPayoutMethod;
            return this;
        }
        
        /**
         * Set autoPayoutEnabled
         * @param autoPayoutEnabled Enables auto payout for the user whenever a default payout method is defined (optional)
         * @return UpdateUserObjectRequestBuilder
         */
        public UpdateUserObjectRequestBuilder autoPayoutEnabled(Boolean autoPayoutEnabled) {
            this.autoPayoutEnabled = autoPayoutEnabled;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Arbitrary metadata (optional)
         * @return UpdateUserObjectRequestBuilder
         */
        public UpdateUserObjectRequestBuilder metadata(Object metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Build call for updateUserObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersUpdateUserObjectRequest usersUpdateUserObjectRequest = buildBodyParams();
            return updateUserObjectCall(userId, usersUpdateUserObjectRequest, _callback);
        }

        private UsersUpdateUserObjectRequest buildBodyParams() {
            UsersUpdateUserObjectRequest usersUpdateUserObjectRequest = new UsersUpdateUserObjectRequest();
            if (this.defaultPayoutMethod != null)
            usersUpdateUserObjectRequest.defaultPayoutMethod(UsersUpdateUserObjectRequest.DefaultPayoutMethodEnum.fromValue(this.defaultPayoutMethod));
            usersUpdateUserObjectRequest.autoPayoutEnabled(this.autoPayoutEnabled);
            usersUpdateUserObjectRequest.metadata(this.metadata);
            return usersUpdateUserObjectRequest;
        }

        /**
         * Execute updateUserObject request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public User execute() throws ApiException {
            UsersUpdateUserObjectRequest usersUpdateUserObjectRequest = buildBodyParams();
            ApiResponse<User> localVarResp = updateUserObjectWithHttpInfo(userId, usersUpdateUserObjectRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateUserObject request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            UsersUpdateUserObjectRequest usersUpdateUserObjectRequest = buildBodyParams();
            return updateUserObjectWithHttpInfo(userId, usersUpdateUserObjectRequest);
        }

        /**
         * Execute updateUserObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            UsersUpdateUserObjectRequest usersUpdateUserObjectRequest = buildBodyParams();
            return updateUserObjectAsync(userId, usersUpdateUserObjectRequest, _callback);
        }
    }

    /**
     * Update a user
     * Update mutable fields of a user object.
     * @param userId Id of the user to fetch (required)
     * @return UpdateUserObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUserObjectRequestBuilder updateUserObject(UUID userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new UpdateUserObjectRequestBuilder(userId);
    }
    private okhttp3.Call verifyUserTokenCall(UUID userId, UsersVerifyUserTokenRequest usersVerifyUserTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersVerifyUserTokenRequest;

        // create path and map variables
        String localVarPath = "/v2/users/{user_id}/verify"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyUserTokenValidateBeforeCall(UUID userId, UsersVerifyUserTokenRequest usersVerifyUserTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling verifyUserToken(Async)");
        }

        return verifyUserTokenCall(userId, usersVerifyUserTokenRequest, _callback);

    }


    private ApiResponse<Void> verifyUserTokenWithHttpInfo(UUID userId, UsersVerifyUserTokenRequest usersVerifyUserTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyUserTokenValidateBeforeCall(userId, usersVerifyUserTokenRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call verifyUserTokenAsync(UUID userId, UsersVerifyUserTokenRequest usersVerifyUserTokenRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyUserTokenValidateBeforeCall(userId, usersVerifyUserTokenRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class VerifyUserTokenRequestBuilder {
        private final String token;
        private final UUID userId;

        private VerifyUserTokenRequestBuilder(String token, UUID userId) {
            this.token = token;
            this.userId = userId;
        }

        /**
         * Build call for verifyUserToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Incorrect token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersVerifyUserTokenRequest usersVerifyUserTokenRequest = buildBodyParams();
            return verifyUserTokenCall(userId, usersVerifyUserTokenRequest, _callback);
        }

        private UsersVerifyUserTokenRequest buildBodyParams() {
            UsersVerifyUserTokenRequest usersVerifyUserTokenRequest = new UsersVerifyUserTokenRequest();
            usersVerifyUserTokenRequest.token(this.token);
            return usersVerifyUserTokenRequest;
        }

        /**
         * Execute verifyUserToken request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Incorrect token </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UsersVerifyUserTokenRequest usersVerifyUserTokenRequest = buildBodyParams();
            verifyUserTokenWithHttpInfo(userId, usersVerifyUserTokenRequest);
        }

        /**
         * Execute verifyUserToken request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Incorrect token </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UsersVerifyUserTokenRequest usersVerifyUserTokenRequest = buildBodyParams();
            return verifyUserTokenWithHttpInfo(userId, usersVerifyUserTokenRequest);
        }

        /**
         * Execute verifyUserToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Incorrect token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UsersVerifyUserTokenRequest usersVerifyUserTokenRequest = buildBodyParams();
            return verifyUserTokenAsync(userId, usersVerifyUserTokenRequest, _callback);
        }
    }

    /**
     * Verify a User
     * Verify a user with a token.
     * @param userId Id of the user to fetch (required)
     * @return VerifyUserTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public VerifyUserTokenRequestBuilder verifyUserToken(String token, UUID userId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            if (token != null && token.length() < 6) {
              throw new IllegalArgumentException("Invalid value for token. Length must be greater than or equal to 6.");
            }

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new VerifyUserTokenRequestBuilder(token, userId);
    }
}
