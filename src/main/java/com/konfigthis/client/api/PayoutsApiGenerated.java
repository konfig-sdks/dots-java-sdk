/*
 * dots api
 * Scalable and Flexible Payouts Infrastructure
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@dots.dev
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PayoutLink;
import com.konfigthis.client.model.PayoutsCreatePayoutRequest;
import com.konfigthis.client.model.PayoutsSendPayoutRequest;
import com.konfigthis.client.model.PayoutsSendPayoutRequestDelivery;
import com.konfigthis.client.model.PayoutsSendPayoutRequestPayee;
import com.konfigthis.client.model.Transfer;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PayoutsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PayoutsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PayoutsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createPayoutCall(PayoutsCreatePayoutRequest payoutsCreatePayoutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payoutsCreatePayoutRequest;

        // create path and map variables
        String localVarPath = "/v2/payouts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPayoutValidateBeforeCall(PayoutsCreatePayoutRequest payoutsCreatePayoutRequest, final ApiCallback _callback) throws ApiException {
        return createPayoutCall(payoutsCreatePayoutRequest, _callback);

    }


    private ApiResponse<Transfer> createPayoutWithHttpInfo(PayoutsCreatePayoutRequest payoutsCreatePayoutRequest) throws ApiException {
        okhttp3.Call localVarCall = createPayoutValidateBeforeCall(payoutsCreatePayoutRequest, null);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPayoutAsync(PayoutsCreatePayoutRequest payoutsCreatePayoutRequest, final ApiCallback<Transfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPayoutValidateBeforeCall(payoutsCreatePayoutRequest, _callback);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePayoutRequestBuilder {
        private final UUID userId;
        private final Integer amount;
        private final String platform;
        private String accountId;
        private Boolean fund;
        private UUID idempotencyKey;
        private Object metadata;

        private CreatePayoutRequestBuilder(UUID userId, Integer amount, String platform) {
            this.userId = userId;
            this.amount = amount;
            this.platform = platform;
        }

        /**
         * Set accountId
         * @param accountId The bank account ID you are paying to. Required for &#x60;ach&#x60; and &#x60;intl_bank&#x60;. (optional)
         * @return CreatePayoutRequestBuilder
         */
        public CreatePayoutRequestBuilder accountId(String accountId) {
            this.accountId = accountId;
            return this;
        }
        
        /**
         * Set fund
         * @param fund Creates a transfer for the amount to the user before creating the payout. The funds are returned if the payout does not succeed. (optional)
         * @return CreatePayoutRequestBuilder
         */
        public CreatePayoutRequestBuilder fund(Boolean fund) {
            this.fund = fund;
            return this;
        }
        
        /**
         * Set idempotencyKey
         * @param idempotencyKey UUID that will be used to idempotently handle requests. Transfers with existing idempotency keys will be rejected. (optional)
         * @return CreatePayoutRequestBuilder
         */
        public CreatePayoutRequestBuilder idempotencyKey(UUID idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. (optional)
         * @return CreatePayoutRequestBuilder
         */
        public CreatePayoutRequestBuilder metadata(Object metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Build call for createPayout
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayoutsCreatePayoutRequest payoutsCreatePayoutRequest = buildBodyParams();
            return createPayoutCall(payoutsCreatePayoutRequest, _callback);
        }

        private PayoutsCreatePayoutRequest buildBodyParams() {
            PayoutsCreatePayoutRequest payoutsCreatePayoutRequest = new PayoutsCreatePayoutRequest();
            payoutsCreatePayoutRequest.userId(this.userId);
            payoutsCreatePayoutRequest.amount(this.amount);
            if (this.platform != null)
            payoutsCreatePayoutRequest.platform(PayoutsCreatePayoutRequest.PlatformEnum.fromValue(this.platform));
            payoutsCreatePayoutRequest.accountId(this.accountId);
            payoutsCreatePayoutRequest.fund(this.fund);
            payoutsCreatePayoutRequest.idempotencyKey(this.idempotencyKey);
            payoutsCreatePayoutRequest.metadata(this.metadata);
            return payoutsCreatePayoutRequest;
        }

        /**
         * Execute createPayout request
         * @return Transfer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public Transfer execute() throws ApiException {
            PayoutsCreatePayoutRequest payoutsCreatePayoutRequest = buildBodyParams();
            ApiResponse<Transfer> localVarResp = createPayoutWithHttpInfo(payoutsCreatePayoutRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPayout request with HTTP info returned
         * @return ApiResponse&lt;Transfer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Transfer> executeWithHttpInfo() throws ApiException {
            PayoutsCreatePayoutRequest payoutsCreatePayoutRequest = buildBodyParams();
            return createPayoutWithHttpInfo(payoutsCreatePayoutRequest);
        }

        /**
         * Execute createPayout request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Transfer> _callback) throws ApiException {
            PayoutsCreatePayoutRequest payoutsCreatePayoutRequest = buildBodyParams();
            return createPayoutAsync(payoutsCreatePayoutRequest, _callback);
        }
    }

    /**
     * Create a Payout
     * Create a payout for an existing user that has a payout method saved to their account.
     * @return CreatePayoutRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreatePayoutRequestBuilder createPayout(UUID userId, Integer amount, String platform) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (platform == null) throw new IllegalArgumentException("\"platform\" is required but got null");
            

        return new CreatePayoutRequestBuilder(userId, amount, platform);
    }
    private okhttp3.Call sendPayoutCall(PayoutsSendPayoutRequest payoutsSendPayoutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payoutsSendPayoutRequest;

        // create path and map variables
        String localVarPath = "/v2/payouts/send-payout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendPayoutValidateBeforeCall(PayoutsSendPayoutRequest payoutsSendPayoutRequest, final ApiCallback _callback) throws ApiException {
        return sendPayoutCall(payoutsSendPayoutRequest, _callback);

    }


    private ApiResponse<PayoutLink> sendPayoutWithHttpInfo(PayoutsSendPayoutRequest payoutsSendPayoutRequest) throws ApiException {
        okhttp3.Call localVarCall = sendPayoutValidateBeforeCall(payoutsSendPayoutRequest, null);
        Type localVarReturnType = new TypeToken<PayoutLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendPayoutAsync(PayoutsSendPayoutRequest payoutsSendPayoutRequest, final ApiCallback<PayoutLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendPayoutValidateBeforeCall(payoutsSendPayoutRequest, _callback);
        Type localVarReturnType = new TypeToken<PayoutLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendPayoutRequestBuilder {
        private final Integer amount;
        private UUID userId;
        private PayoutsSendPayoutRequestPayee payee;
        private PayoutsSendPayoutRequestDelivery delivery;
        private Boolean forceCollectComplianceInformation;
        private List<String> additionalSteps;
        private Boolean taxExempt;
        private Object metadata;
        private String memo;
        private Object idempotencyKey;
        private UUID payoutFeeParty;

        private SendPayoutRequestBuilder(Integer amount) {
            this.amount = amount;
        }

        /**
         * Set userId
         * @param userId The user&#39;s id. &#x60;user_id&#x60; or &#x60;payee&#x60; is required. (optional)
         * @return SendPayoutRequestBuilder
         */
        public SendPayoutRequestBuilder userId(UUID userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set payee
         * @param payee  (optional)
         * @return SendPayoutRequestBuilder
         */
        public SendPayoutRequestBuilder payee(PayoutsSendPayoutRequestPayee payee) {
            this.payee = payee;
            return this;
        }
        
        /**
         * Set delivery
         * @param delivery  (optional)
         * @return SendPayoutRequestBuilder
         */
        public SendPayoutRequestBuilder delivery(PayoutsSendPayoutRequestDelivery delivery) {
            this.delivery = delivery;
            return this;
        }
        
        /**
         * Set forceCollectComplianceInformation
         * @param forceCollectComplianceInformation Collect 1099 or w8-ben information. (optional, default to false)
         * @return SendPayoutRequestBuilder
         */
        public SendPayoutRequestBuilder forceCollectComplianceInformation(Boolean forceCollectComplianceInformation) {
            this.forceCollectComplianceInformation = forceCollectComplianceInformation;
            return this;
        }
        
        /**
         * Set additionalSteps
         * @param additionalSteps Array of steps in the flow. (optional)
         * @return SendPayoutRequestBuilder
         */
        public SendPayoutRequestBuilder additionalSteps(List<String> additionalSteps) {
            this.additionalSteps = additionalSteps;
            return this;
        }
        
        /**
         * Set taxExempt
         * @param taxExempt Payouts marked as &#x60;tax_exempt&#x60; will not be counted towards the 1099 threshold. (optional)
         * @return SendPayoutRequestBuilder
         */
        public SendPayoutRequestBuilder taxExempt(Boolean taxExempt) {
            this.taxExempt = taxExempt;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. (optional)
         * @return SendPayoutRequestBuilder
         */
        public SendPayoutRequestBuilder metadata(Object metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set memo
         * @param memo Add a memo to the top of the Payout Link (optional)
         * @return SendPayoutRequestBuilder
         */
        public SendPayoutRequestBuilder memo(String memo) {
            this.memo = memo;
            return this;
        }
        
        /**
         * Set idempotencyKey
         * @param idempotencyKey Unique UUID key that prevents duplicate requests from being processed. If a payout link with the idempotency key exists, a new link will not be created and the existing link will be returned instead. (optional)
         * @return SendPayoutRequestBuilder
         */
        public SendPayoutRequestBuilder idempotencyKey(Object idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Set payoutFeeParty
         * @param payoutFeeParty Overrides the setting for which party will pay fees on this payout. This takes precedence over the default for your application. (optional)
         * @return SendPayoutRequestBuilder
         */
        public SendPayoutRequestBuilder payoutFeeParty(UUID payoutFeeParty) {
            this.payoutFeeParty = payoutFeeParty;
            return this;
        }
        
        /**
         * Build call for sendPayout
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayoutsSendPayoutRequest payoutsSendPayoutRequest = buildBodyParams();
            return sendPayoutCall(payoutsSendPayoutRequest, _callback);
        }

        private PayoutsSendPayoutRequest buildBodyParams() {
            PayoutsSendPayoutRequest payoutsSendPayoutRequest = new PayoutsSendPayoutRequest();
            payoutsSendPayoutRequest.amount(this.amount);
            payoutsSendPayoutRequest.userId(this.userId);
            payoutsSendPayoutRequest.payee(this.payee);
            payoutsSendPayoutRequest.delivery(this.delivery);
            payoutsSendPayoutRequest.forceCollectComplianceInformation(this.forceCollectComplianceInformation);
            if (this.additionalSteps != null)
            payoutsSendPayoutRequest.additionalSteps(PayoutsSendPayoutRequest.AdditionalStepsEnum.fromValue(this.additionalSteps));
            payoutsSendPayoutRequest.taxExempt(this.taxExempt);
            payoutsSendPayoutRequest.metadata(this.metadata);
            payoutsSendPayoutRequest.memo(this.memo);
            payoutsSendPayoutRequest.idempotencyKey(this.idempotencyKey);
            if (this.payoutFeeParty != null)
            payoutsSendPayoutRequest.payoutFeeParty(PayoutsSendPayoutRequest.PayoutFeePartyEnum.fromValue(this.payoutFeeParty));
            return payoutsSendPayoutRequest;
        }

        /**
         * Execute sendPayout request
         * @return PayoutLink
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public PayoutLink execute() throws ApiException {
            PayoutsSendPayoutRequest payoutsSendPayoutRequest = buildBodyParams();
            ApiResponse<PayoutLink> localVarResp = sendPayoutWithHttpInfo(payoutsSendPayoutRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendPayout request with HTTP info returned
         * @return ApiResponse&lt;PayoutLink&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayoutLink> executeWithHttpInfo() throws ApiException {
            PayoutsSendPayoutRequest payoutsSendPayoutRequest = buildBodyParams();
            return sendPayoutWithHttpInfo(payoutsSendPayoutRequest);
        }

        /**
         * Execute sendPayout request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayoutLink> _callback) throws ApiException {
            PayoutsSendPayoutRequest payoutsSendPayoutRequest = buildBodyParams();
            return sendPayoutAsync(payoutsSendPayoutRequest, _callback);
        }
    }

    /**
     * Send a Payout
     * Send a payout to a person when you know their phone number or user id. If the user has a Dots acconut, the funds will delivered according to their saved prefernces. Otherwise, they will be sent a Payout Link to onboard and recieve funds.
     * @return SendPayoutRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SendPayoutRequestBuilder sendPayout(Integer amount) throws IllegalArgumentException {
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        return new SendPayoutRequestBuilder(amount);
    }
}
