/*
 * dots api
 * Scalable and Flexible Payouts Infrastructure
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@dots.dev
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PaymentIntent;
import com.konfigthis.client.model.PaymentintentsConfirmIntentRequest;
import com.konfigthis.client.model.PaymentintentsCreateIntentRequest;
import com.konfigthis.client.model.PaymentintentsCreateIntentRequestTransferData;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PaymentIntentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentIntentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentIntentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call confirmIntentCall(String paymentIntentId, PaymentintentsConfirmIntentRequest paymentintentsConfirmIntentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentintentsConfirmIntentRequest;

        // create path and map variables
        String localVarPath = "/v2/payment-intents/{payment_intent_id}/confirm"
            .replace("{" + "payment_intent_id" + "}", localVarApiClient.escapeString(paymentIntentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmIntentValidateBeforeCall(String paymentIntentId, PaymentintentsConfirmIntentRequest paymentintentsConfirmIntentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentIntentId' is set
        if (paymentIntentId == null) {
            throw new ApiException("Missing the required parameter 'paymentIntentId' when calling confirmIntent(Async)");
        }

        return confirmIntentCall(paymentIntentId, paymentintentsConfirmIntentRequest, _callback);

    }


    private ApiResponse<PaymentIntent> confirmIntentWithHttpInfo(String paymentIntentId, PaymentintentsConfirmIntentRequest paymentintentsConfirmIntentRequest) throws ApiException {
        okhttp3.Call localVarCall = confirmIntentValidateBeforeCall(paymentIntentId, paymentintentsConfirmIntentRequest, null);
        Type localVarReturnType = new TypeToken<PaymentIntent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call confirmIntentAsync(String paymentIntentId, PaymentintentsConfirmIntentRequest paymentintentsConfirmIntentRequest, final ApiCallback<PaymentIntent> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmIntentValidateBeforeCall(paymentIntentId, paymentintentsConfirmIntentRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentIntent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ConfirmIntentRequestBuilder {
        private final String paymentMethodId;
        private final String paymentIntentId;

        private ConfirmIntentRequestBuilder(String paymentMethodId, String paymentIntentId) {
            this.paymentMethodId = paymentMethodId;
            this.paymentIntentId = paymentIntentId;
        }

        /**
         * Build call for confirmIntent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PaymentintentsConfirmIntentRequest paymentintentsConfirmIntentRequest = buildBodyParams();
            return confirmIntentCall(paymentIntentId, paymentintentsConfirmIntentRequest, _callback);
        }

        private PaymentintentsConfirmIntentRequest buildBodyParams() {
            PaymentintentsConfirmIntentRequest paymentintentsConfirmIntentRequest = new PaymentintentsConfirmIntentRequest();
            paymentintentsConfirmIntentRequest.paymentMethodId(this.paymentMethodId);
            return paymentintentsConfirmIntentRequest;
        }

        /**
         * Execute confirmIntent request
         * @return PaymentIntent
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PaymentIntent execute() throws ApiException {
            PaymentintentsConfirmIntentRequest paymentintentsConfirmIntentRequest = buildBodyParams();
            ApiResponse<PaymentIntent> localVarResp = confirmIntentWithHttpInfo(paymentIntentId, paymentintentsConfirmIntentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute confirmIntent request with HTTP info returned
         * @return ApiResponse&lt;PaymentIntent&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentIntent> executeWithHttpInfo() throws ApiException {
            PaymentintentsConfirmIntentRequest paymentintentsConfirmIntentRequest = buildBodyParams();
            return confirmIntentWithHttpInfo(paymentIntentId, paymentintentsConfirmIntentRequest);
        }

        /**
         * Execute confirmIntent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentIntent> _callback) throws ApiException {
            PaymentintentsConfirmIntentRequest paymentintentsConfirmIntentRequest = buildBodyParams();
            return confirmIntentAsync(paymentIntentId, paymentintentsConfirmIntentRequest, _callback);
        }
    }

    /**
     * Confirm a Payment Intent
     * Confirm a payment intent that has not been confirmed yet.
     * @param paymentIntentId The ID if the Payment Intent to confirm. (required)
     * @return ConfirmIntentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConfirmIntentRequestBuilder confirmIntent(String paymentMethodId, String paymentIntentId) throws IllegalArgumentException {
        if (paymentMethodId == null) throw new IllegalArgumentException("\"paymentMethodId\" is required but got null");
            

        if (paymentIntentId == null) throw new IllegalArgumentException("\"paymentIntentId\" is required but got null");
            

        return new ConfirmIntentRequestBuilder(paymentMethodId, paymentIntentId);
    }
    private okhttp3.Call createIntentCall(PaymentintentsCreateIntentRequest paymentintentsCreateIntentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentintentsCreateIntentRequest;

        // create path and map variables
        String localVarPath = "/v2/payment-intents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIntentValidateBeforeCall(PaymentintentsCreateIntentRequest paymentintentsCreateIntentRequest, final ApiCallback _callback) throws ApiException {
        return createIntentCall(paymentintentsCreateIntentRequest, _callback);

    }


    private ApiResponse<PaymentIntent> createIntentWithHttpInfo(PaymentintentsCreateIntentRequest paymentintentsCreateIntentRequest) throws ApiException {
        okhttp3.Call localVarCall = createIntentValidateBeforeCall(paymentintentsCreateIntentRequest, null);
        Type localVarReturnType = new TypeToken<PaymentIntent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createIntentAsync(PaymentintentsCreateIntentRequest paymentintentsCreateIntentRequest, final ApiCallback<PaymentIntent> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIntentValidateBeforeCall(paymentintentsCreateIntentRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentIntent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateIntentRequestBuilder {
        private final Integer amount;
        private final String currency;
        private String description;
        private Boolean confirm;
        private UUID userId;
        private UUID customerId;
        private UUID paymentMethodId;
        private List<String> paymentMethodTypes;
        private String setupFutureUsage;
        private Boolean metadata;
        private PaymentintentsCreateIntentRequestTransferData transferData;
        private Integer applicationFeeAmount;

        private CreateIntentRequestBuilder(Integer amount, String currency) {
            this.amount = amount;
            this.currency = currency;
        }

        /**
         * Set description
         * @param description An arbitrary string attached to the object. Often useful for displaying to users. (optional)
         * @return CreateIntentRequestBuilder
         */
        public CreateIntentRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set confirm
         * @param confirm Set to &#x60;true&#x60; to attempt to confirm this payment intent immediately. Defaults to &#x60;false&#x60;. (optional, default to false)
         * @return CreateIntentRequestBuilder
         */
        public CreateIntentRequestBuilder confirm(Boolean confirm) {
            this.confirm = confirm;
            return this;
        }
        
        /**
         * Set userId
         * @param userId ID of a Dots &#x60;user&#x60; making this payment. (optional)
         * @return CreateIntentRequestBuilder
         */
        public CreateIntentRequestBuilder userId(UUID userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set customerId
         * @param customerId ID of a Dots &#x60;payment_customer&#x60; making this payment. (optional)
         * @return CreateIntentRequestBuilder
         */
        public CreateIntentRequestBuilder customerId(UUID customerId) {
            this.customerId = customerId;
            return this;
        }
        
        /**
         * Set paymentMethodId
         * @param paymentMethodId ID of the payment method to attach to this payment intent. (optional)
         * @return CreateIntentRequestBuilder
         */
        public CreateIntentRequestBuilder paymentMethodId(UUID paymentMethodId) {
            this.paymentMethodId = paymentMethodId;
            return this;
        }
        
        /**
         * Set paymentMethodTypes
         * @param paymentMethodTypes Currently only &#x60;card&#x60; is supported. (optional)
         * @return CreateIntentRequestBuilder
         */
        public CreateIntentRequestBuilder paymentMethodTypes(List<String> paymentMethodTypes) {
            this.paymentMethodTypes = paymentMethodTypes;
            return this;
        }
        
        /**
         * Set setupFutureUsage
         * @param setupFutureUsage  (optional)
         * @return CreateIntentRequestBuilder
         */
        public CreateIntentRequestBuilder setupFutureUsage(String setupFutureUsage) {
            this.setupFutureUsage = setupFutureUsage;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. (optional)
         * @return CreateIntentRequestBuilder
         */
        public CreateIntentRequestBuilder metadata(Boolean metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set transferData
         * @param transferData  (optional)
         * @return CreateIntentRequestBuilder
         */
        public CreateIntentRequestBuilder transferData(PaymentintentsCreateIntentRequestTransferData transferData) {
            this.transferData = transferData;
            return this;
        }
        
        /**
         * Set applicationFeeAmount
         * @param applicationFeeAmount Amount in cents to transfer to the application&#39;s wallet as a platform fee. (optional)
         * @return CreateIntentRequestBuilder
         */
        public CreateIntentRequestBuilder applicationFeeAmount(Integer applicationFeeAmount) {
            this.applicationFeeAmount = applicationFeeAmount;
            return this;
        }
        
        /**
         * Build call for createIntent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PaymentintentsCreateIntentRequest paymentintentsCreateIntentRequest = buildBodyParams();
            return createIntentCall(paymentintentsCreateIntentRequest, _callback);
        }

        private PaymentintentsCreateIntentRequest buildBodyParams() {
            PaymentintentsCreateIntentRequest paymentintentsCreateIntentRequest = new PaymentintentsCreateIntentRequest();
            paymentintentsCreateIntentRequest.description(this.description);
            paymentintentsCreateIntentRequest.amount(this.amount);
            if (this.currency != null)
            paymentintentsCreateIntentRequest.currency(PaymentintentsCreateIntentRequest.CurrencyEnum.fromValue(this.currency));
            paymentintentsCreateIntentRequest.confirm(this.confirm);
            paymentintentsCreateIntentRequest.userId(this.userId);
            paymentintentsCreateIntentRequest.customerId(this.customerId);
            paymentintentsCreateIntentRequest.paymentMethodId(this.paymentMethodId);
            if (this.paymentMethodTypes != null)
            paymentintentsCreateIntentRequest.paymentMethodTypes(PaymentintentsCreateIntentRequest.PaymentMethodTypesEnum.fromValue(this.paymentMethodTypes));
            if (this.setupFutureUsage != null)
            paymentintentsCreateIntentRequest.setupFutureUsage(PaymentintentsCreateIntentRequest.SetupFutureUsageEnum.fromValue(this.setupFutureUsage));
            paymentintentsCreateIntentRequest.metadata(this.metadata);
            paymentintentsCreateIntentRequest.transferData(this.transferData);
            paymentintentsCreateIntentRequest.applicationFeeAmount(this.applicationFeeAmount);
            return paymentintentsCreateIntentRequest;
        }

        /**
         * Execute createIntent request
         * @return PaymentIntent
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PaymentIntent execute() throws ApiException {
            PaymentintentsCreateIntentRequest paymentintentsCreateIntentRequest = buildBodyParams();
            ApiResponse<PaymentIntent> localVarResp = createIntentWithHttpInfo(paymentintentsCreateIntentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createIntent request with HTTP info returned
         * @return ApiResponse&lt;PaymentIntent&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentIntent> executeWithHttpInfo() throws ApiException {
            PaymentintentsCreateIntentRequest paymentintentsCreateIntentRequest = buildBodyParams();
            return createIntentWithHttpInfo(paymentintentsCreateIntentRequest);
        }

        /**
         * Execute createIntent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentIntent> _callback) throws ApiException {
            PaymentintentsCreateIntentRequest paymentintentsCreateIntentRequest = buildBodyParams();
            return createIntentAsync(paymentintentsCreateIntentRequest, _callback);
        }
    }

    /**
     * Create a Payment Intent
     * Create a Payment Intent
     * @return CreateIntentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateIntentRequestBuilder createIntent(Integer amount, String currency) throws IllegalArgumentException {
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            

        return new CreateIntentRequestBuilder(amount, currency);
    }
    private okhttp3.Call getByIdCall(String paymentIntentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/payment-intents/{payment_intent_id}"
            .replace("{" + "payment_intent_id" + "}", localVarApiClient.escapeString(paymentIntentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String paymentIntentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentIntentId' is set
        if (paymentIntentId == null) {
            throw new ApiException("Missing the required parameter 'paymentIntentId' when calling getById(Async)");
        }

        return getByIdCall(paymentIntentId, _callback);

    }


    private ApiResponse<PaymentIntent> getByIdWithHttpInfo(String paymentIntentId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(paymentIntentId, null);
        Type localVarReturnType = new TypeToken<PaymentIntent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String paymentIntentId, final ApiCallback<PaymentIntent> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(paymentIntentId, _callback);
        Type localVarReturnType = new TypeToken<PaymentIntent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String paymentIntentId;

        private GetByIdRequestBuilder(String paymentIntentId) {
            this.paymentIntentId = paymentIntentId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(paymentIntentId, _callback);
        }


        /**
         * Execute getById request
         * @return PaymentIntent
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PaymentIntent execute() throws ApiException {
            ApiResponse<PaymentIntent> localVarResp = getByIdWithHttpInfo(paymentIntentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;PaymentIntent&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentIntent> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(paymentIntentId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentIntent> _callback) throws ApiException {
            return getByIdAsync(paymentIntentId, _callback);
        }
    }

    /**
     * Retrieve a Payment Intent
     * Retrieve a payment intent by its ID.
     * @param paymentIntentId Payment Intent ID (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String paymentIntentId) throws IllegalArgumentException {
        if (paymentIntentId == null) throw new IllegalArgumentException("\"paymentIntentId\" is required but got null");
            

        return new GetByIdRequestBuilder(paymentIntentId);
    }
    private okhttp3.Call listAllCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/payment-intents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listAllCall(_callback);

    }


    private ApiResponse<List<PaymentIntent>> listAllWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<PaymentIntent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(final ApiCallback<List<PaymentIntent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<PaymentIntent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {

        private ListAllRequestBuilder() {
        }

        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(_callback);
        }


        /**
         * Execute listAll request
         * @return List&lt;PaymentIntent&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public List<PaymentIntent> execute() throws ApiException {
            ApiResponse<List<PaymentIntent>> localVarResp = listAllWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PaymentIntent&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PaymentIntent>> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo();
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PaymentIntent>> _callback) throws ApiException {
            return listAllAsync(_callback);
        }
    }

    /**
     * List all Payment Intents
     * Get all payment intents
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
}
