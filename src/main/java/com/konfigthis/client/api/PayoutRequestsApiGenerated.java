/*
 * dots api
 * Scalable and Flexible Payouts Infrastructure
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@dots.dev
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PayoutRequest;
import com.konfigthis.client.model.PayoutrequestsGetAllPayoutsResponse;
import com.konfigthis.client.model.PayoutrequestsSubmitRequestRequest;
import com.konfigthis.client.model.PayoutsSendPayoutRequestPayee;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PayoutRequestsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PayoutRequestsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PayoutRequestsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllPayoutsCall(Integer limit, UUID startingAfter, UUID endingBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/payout-requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        if (endingBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ending_before", endingBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPayoutsValidateBeforeCall(Integer limit, UUID startingAfter, UUID endingBefore, final ApiCallback _callback) throws ApiException {
        return getAllPayoutsCall(limit, startingAfter, endingBefore, _callback);

    }


    private ApiResponse<PayoutrequestsGetAllPayoutsResponse> getAllPayoutsWithHttpInfo(Integer limit, UUID startingAfter, UUID endingBefore) throws ApiException {
        okhttp3.Call localVarCall = getAllPayoutsValidateBeforeCall(limit, startingAfter, endingBefore, null);
        Type localVarReturnType = new TypeToken<PayoutrequestsGetAllPayoutsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllPayoutsAsync(Integer limit, UUID startingAfter, UUID endingBefore, final ApiCallback<PayoutrequestsGetAllPayoutsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPayoutsValidateBeforeCall(limit, startingAfter, endingBefore, _callback);
        Type localVarReturnType = new TypeToken<PayoutrequestsGetAllPayoutsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllPayoutsRequestBuilder {
        private Integer limit;
        private UUID startingAfter;
        private UUID endingBefore;

        private GetAllPayoutsRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit A limit on the number of objects to be returned, between 1 and 100. (optional)
         * @return GetAllPayoutsRequestBuilder
         */
        public GetAllPayoutsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set startingAfter
         * @param startingAfter A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;aaa&#x60;, your subsequent call can include &#x60;starting_after&#x60;&#x3D;&#x60;aaa&#x60; in order to fetch the next page of the list. (optional)
         * @return GetAllPayoutsRequestBuilder
         */
        public GetAllPayoutsRequestBuilder startingAfter(UUID startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }
        
        /**
         * Set endingBefore
         * @param endingBefore A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;aaa&#x60;, your subsequent call can include &#x60;ending_before&#x60;&#x3D;&#x60;aaa&#x60; in order to fetch the previous page of the list. (optional)
         * @return GetAllPayoutsRequestBuilder
         */
        public GetAllPayoutsRequestBuilder endingBefore(UUID endingBefore) {
            this.endingBefore = endingBefore;
            return this;
        }
        
        /**
         * Build call for getAllPayouts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllPayoutsCall(limit, startingAfter, endingBefore, _callback);
        }


        /**
         * Execute getAllPayouts request
         * @return PayoutrequestsGetAllPayoutsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PayoutrequestsGetAllPayoutsResponse execute() throws ApiException {
            ApiResponse<PayoutrequestsGetAllPayoutsResponse> localVarResp = getAllPayoutsWithHttpInfo(limit, startingAfter, endingBefore);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllPayouts request with HTTP info returned
         * @return ApiResponse&lt;PayoutrequestsGetAllPayoutsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayoutrequestsGetAllPayoutsResponse> executeWithHttpInfo() throws ApiException {
            return getAllPayoutsWithHttpInfo(limit, startingAfter, endingBefore);
        }

        /**
         * Execute getAllPayouts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayoutrequestsGetAllPayoutsResponse> _callback) throws ApiException {
            return getAllPayoutsAsync(limit, startingAfter, endingBefore, _callback);
        }
    }

    /**
     * List all Payout Requests
     * List all payout requests.
     * @return GetAllPayoutsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetAllPayoutsRequestBuilder getAllPayouts() throws IllegalArgumentException {
        return new GetAllPayoutsRequestBuilder();
    }
    private okhttp3.Call getPayoutByIdCall(String payoutRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/payout-requests/{payout_request_id}"
            .replace("{" + "payout_request_id" + "}", localVarApiClient.escapeString(payoutRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayoutByIdValidateBeforeCall(String payoutRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payoutRequestId' is set
        if (payoutRequestId == null) {
            throw new ApiException("Missing the required parameter 'payoutRequestId' when calling getPayoutById(Async)");
        }

        return getPayoutByIdCall(payoutRequestId, _callback);

    }


    private ApiResponse<PayoutRequest> getPayoutByIdWithHttpInfo(String payoutRequestId) throws ApiException {
        okhttp3.Call localVarCall = getPayoutByIdValidateBeforeCall(payoutRequestId, null);
        Type localVarReturnType = new TypeToken<PayoutRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPayoutByIdAsync(String payoutRequestId, final ApiCallback<PayoutRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayoutByIdValidateBeforeCall(payoutRequestId, _callback);
        Type localVarReturnType = new TypeToken<PayoutRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPayoutByIdRequestBuilder {
        private final String payoutRequestId;

        private GetPayoutByIdRequestBuilder(String payoutRequestId) {
            this.payoutRequestId = payoutRequestId;
        }

        /**
         * Build call for getPayoutById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPayoutByIdCall(payoutRequestId, _callback);
        }


        /**
         * Execute getPayoutById request
         * @return PayoutRequest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PayoutRequest execute() throws ApiException {
            ApiResponse<PayoutRequest> localVarResp = getPayoutByIdWithHttpInfo(payoutRequestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPayoutById request with HTTP info returned
         * @return ApiResponse&lt;PayoutRequest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayoutRequest> executeWithHttpInfo() throws ApiException {
            return getPayoutByIdWithHttpInfo(payoutRequestId);
        }

        /**
         * Execute getPayoutById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayoutRequest> _callback) throws ApiException {
            return getPayoutByIdAsync(payoutRequestId, _callback);
        }
    }

    /**
     * Retrieve a Payout Request
     * Get a payout request by its id.
     * @param payoutRequestId Id of the payout request (required)
     * @return GetPayoutByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetPayoutByIdRequestBuilder getPayoutById(String payoutRequestId) throws IllegalArgumentException {
        if (payoutRequestId == null) throw new IllegalArgumentException("\"payoutRequestId\" is required but got null");
            

        return new GetPayoutByIdRequestBuilder(payoutRequestId);
    }
    private okhttp3.Call submitRequestCall(PayoutrequestsSubmitRequestRequest payoutrequestsSubmitRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payoutrequestsSubmitRequestRequest;

        // create path and map variables
        String localVarPath = "/v2/payout-requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitRequestValidateBeforeCall(PayoutrequestsSubmitRequestRequest payoutrequestsSubmitRequestRequest, final ApiCallback _callback) throws ApiException {
        return submitRequestCall(payoutrequestsSubmitRequestRequest, _callback);

    }


    private ApiResponse<PayoutRequest> submitRequestWithHttpInfo(PayoutrequestsSubmitRequestRequest payoutrequestsSubmitRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = submitRequestValidateBeforeCall(payoutrequestsSubmitRequestRequest, null);
        Type localVarReturnType = new TypeToken<PayoutRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call submitRequestAsync(PayoutrequestsSubmitRequestRequest payoutrequestsSubmitRequestRequest, final ApiCallback<PayoutRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitRequestValidateBeforeCall(payoutrequestsSubmitRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<PayoutRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SubmitRequestRequestBuilder {
        private final Integer amount;
        private UUID userId;
        private PayoutsSendPayoutRequestPayee payee;
        private Object metadata;
        private String memo;

        private SubmitRequestRequestBuilder(Integer amount) {
            this.amount = amount;
        }

        /**
         * Set userId
         * @param userId The user&#39;s id. &#x60;user_id&#x60; or &#x60;payee&#x60; is required. (optional)
         * @return SubmitRequestRequestBuilder
         */
        public SubmitRequestRequestBuilder userId(UUID userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set payee
         * @param payee  (optional)
         * @return SubmitRequestRequestBuilder
         */
        public SubmitRequestRequestBuilder payee(PayoutsSendPayoutRequestPayee payee) {
            this.payee = payee;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. (optional)
         * @return SubmitRequestRequestBuilder
         */
        public SubmitRequestRequestBuilder metadata(Object metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set memo
         * @param memo Add a memo to payout request (optional)
         * @return SubmitRequestRequestBuilder
         */
        public SubmitRequestRequestBuilder memo(String memo) {
            this.memo = memo;
            return this;
        }
        
        /**
         * Build call for submitRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayoutrequestsSubmitRequestRequest payoutrequestsSubmitRequestRequest = buildBodyParams();
            return submitRequestCall(payoutrequestsSubmitRequestRequest, _callback);
        }

        private PayoutrequestsSubmitRequestRequest buildBodyParams() {
            PayoutrequestsSubmitRequestRequest payoutrequestsSubmitRequestRequest = new PayoutrequestsSubmitRequestRequest();
            payoutrequestsSubmitRequestRequest.amount(this.amount);
            payoutrequestsSubmitRequestRequest.userId(this.userId);
            payoutrequestsSubmitRequestRequest.payee(this.payee);
            payoutrequestsSubmitRequestRequest.metadata(this.metadata);
            payoutrequestsSubmitRequestRequest.memo(this.memo);
            return payoutrequestsSubmitRequestRequest;
        }

        /**
         * Execute submitRequest request
         * @return PayoutRequest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public PayoutRequest execute() throws ApiException {
            PayoutrequestsSubmitRequestRequest payoutrequestsSubmitRequestRequest = buildBodyParams();
            ApiResponse<PayoutRequest> localVarResp = submitRequestWithHttpInfo(payoutrequestsSubmitRequestRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute submitRequest request with HTTP info returned
         * @return ApiResponse&lt;PayoutRequest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayoutRequest> executeWithHttpInfo() throws ApiException {
            PayoutrequestsSubmitRequestRequest payoutrequestsSubmitRequestRequest = buildBodyParams();
            return submitRequestWithHttpInfo(payoutrequestsSubmitRequestRequest);
        }

        /**
         * Execute submitRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayoutRequest> _callback) throws ApiException {
            PayoutrequestsSubmitRequestRequest payoutrequestsSubmitRequestRequest = buildBodyParams();
            return submitRequestAsync(payoutrequestsSubmitRequestRequest, _callback);
        }
    }

    /**
     * Create a Payout Request
     * Submit a payout request from a person when you know their phone number or user id. Once the payout request is approved, they will be sent a Payout Link to onboard and recieve funds.
     * @return SubmitRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SubmitRequestRequestBuilder submitRequest(Integer amount) throws IllegalArgumentException {
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        return new SubmitRequestRequestBuilder(amount);
    }
}
