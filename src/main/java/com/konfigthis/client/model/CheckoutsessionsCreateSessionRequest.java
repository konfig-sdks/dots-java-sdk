/*
 * dots api
 * Scalable and Flexible Payouts Infrastructure
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@dots.dev
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CheckoutsessionsCreateSessionRequestLineItemsInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CheckoutsessionsCreateSessionRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CheckoutsessionsCreateSessionRequest {
  public static final String SERIALIZED_NAME_LINE_ITEMS = "line_items";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private Set<CheckoutsessionsCreateSessionRequestLineItemsInner> lineItems = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_CUSTOMER_EMAIL = "customer_email";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_EMAIL)
  private String customerEmail;

  public static final String SERIALIZED_NAME_CLIENT_REFERENCE_ID = "client_reference_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_REFERENCE_ID)
  private String clientReferenceId;

  public static final String SERIALIZED_NAME_SUCCESS_URL = "success_url";
  @SerializedName(SERIALIZED_NAME_SUCCESS_URL)
  private URI successUrl;

  public static final String SERIALIZED_NAME_CANCEL_URL = "cancel_url";
  @SerializedName(SERIALIZED_NAME_CANCEL_URL)
  private URI cancelUrl;

  /**
   * Gets or Sets mode
   */
  @JsonAdapter(ModeEnum.Adapter.class)
 public enum ModeEnum {
    PAYMENT("payment");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ModeEnum mode;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private UUID userId;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private UUID customerId;

  public static final String SERIALIZED_NAME_EXPIRES_IN = "expires_in";
  @SerializedName(SERIALIZED_NAME_EXPIRES_IN)
  private Integer expiresIn = 10800;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public CheckoutsessionsCreateSessionRequest() {
  }

  public CheckoutsessionsCreateSessionRequest lineItems(Set<CheckoutsessionsCreateSessionRequestLineItemsInner> lineItems) {
    
    
    
    
    this.lineItems = lineItems;
    return this;
  }

  public CheckoutsessionsCreateSessionRequest addLineItemsItem(CheckoutsessionsCreateSessionRequestLineItemsInner lineItemsItem) {
    this.lineItems.add(lineItemsItem);
    return this;
  }

   /**
   * Get lineItems
   * @return lineItems
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Set<CheckoutsessionsCreateSessionRequestLineItemsInner> getLineItems() {
    return lineItems;
  }


  public void setLineItems(Set<CheckoutsessionsCreateSessionRequestLineItemsInner> lineItems) {
    
    
    
    this.lineItems = lineItems;
  }


  public CheckoutsessionsCreateSessionRequest customerEmail(String customerEmail) {
    
    
    
    
    this.customerEmail = customerEmail;
    return this;
  }

   /**
   * Get customerEmail
   * @return customerEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCustomerEmail() {
    return customerEmail;
  }


  public void setCustomerEmail(String customerEmail) {
    
    
    
    this.customerEmail = customerEmail;
  }


  public CheckoutsessionsCreateSessionRequest clientReferenceId(String clientReferenceId) {
    
    
    
    
    this.clientReferenceId = clientReferenceId;
    return this;
  }

   /**
   * Get clientReferenceId
   * @return clientReferenceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getClientReferenceId() {
    return clientReferenceId;
  }


  public void setClientReferenceId(String clientReferenceId) {
    
    
    
    this.clientReferenceId = clientReferenceId;
  }


  public CheckoutsessionsCreateSessionRequest successUrl(URI successUrl) {
    
    
    
    
    this.successUrl = successUrl;
    return this;
  }

   /**
   * Get successUrl
   * @return successUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public URI getSuccessUrl() {
    return successUrl;
  }


  public void setSuccessUrl(URI successUrl) {
    
    
    
    this.successUrl = successUrl;
  }


  public CheckoutsessionsCreateSessionRequest cancelUrl(URI cancelUrl) {
    
    
    
    
    this.cancelUrl = cancelUrl;
    return this;
  }

   /**
   * Get cancelUrl
   * @return cancelUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public URI getCancelUrl() {
    return cancelUrl;
  }


  public void setCancelUrl(URI cancelUrl) {
    
    
    
    this.cancelUrl = cancelUrl;
  }


  public CheckoutsessionsCreateSessionRequest mode(ModeEnum mode) {
    
    
    
    
    this.mode = mode;
    return this;
  }

   /**
   * Get mode
   * @return mode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ModeEnum getMode() {
    return mode;
  }


  public void setMode(ModeEnum mode) {
    
    
    
    this.mode = mode;
  }


  public CheckoutsessionsCreateSessionRequest userId(UUID userId) {
    
    
    
    
    this.userId = userId;
    return this;
  }

   /**
   * Supply a Dots user ID in place of a customer ID
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Supply a Dots user ID in place of a customer ID")

  public UUID getUserId() {
    return userId;
  }


  public void setUserId(UUID userId) {
    
    
    
    this.userId = userId;
  }


  public CheckoutsessionsCreateSessionRequest customerId(UUID customerId) {
    
    
    
    
    this.customerId = customerId;
    return this;
  }

   /**
   * Get customerId
   * @return customerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getCustomerId() {
    return customerId;
  }


  public void setCustomerId(UUID customerId) {
    
    
    
    this.customerId = customerId;
  }


  public CheckoutsessionsCreateSessionRequest expiresIn(Integer expiresIn) {
    if (expiresIn != null && expiresIn < 0) {
      throw new IllegalArgumentException("Invalid value for expiresIn. Must be greater than or equal to 0.");
    }
    if (expiresIn != null && expiresIn > 10800) {
      throw new IllegalArgumentException("Invalid value for expiresIn. Must be less than or equal to 10800.");
    }
    
    
    this.expiresIn = expiresIn;
    return this;
  }

   /**
   * Get expiresIn
   * minimum: 0
   * maximum: 10800
   * @return expiresIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10800", value = "")

  public Integer getExpiresIn() {
    return expiresIn;
  }


  public void setExpiresIn(Integer expiresIn) {
    if (expiresIn != null && expiresIn < 0) {
      throw new IllegalArgumentException("Invalid value for expiresIn. Must be greater than or equal to 0.");
    }
    if (expiresIn != null && expiresIn > 10800) {
      throw new IllegalArgumentException("Invalid value for expiresIn. Must be less than or equal to 10800.");
    }
    
    this.expiresIn = expiresIn;
  }


  public CheckoutsessionsCreateSessionRequest metadata(Object metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getMetadata() {
    return metadata;
  }


  public void setMetadata(Object metadata) {
    
    
    
    this.metadata = metadata;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CheckoutsessionsCreateSessionRequest instance itself
   */
  public CheckoutsessionsCreateSessionRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutsessionsCreateSessionRequest checkoutsessionsCreateSessionRequest = (CheckoutsessionsCreateSessionRequest) o;
    return Objects.equals(this.lineItems, checkoutsessionsCreateSessionRequest.lineItems) &&
        Objects.equals(this.customerEmail, checkoutsessionsCreateSessionRequest.customerEmail) &&
        Objects.equals(this.clientReferenceId, checkoutsessionsCreateSessionRequest.clientReferenceId) &&
        Objects.equals(this.successUrl, checkoutsessionsCreateSessionRequest.successUrl) &&
        Objects.equals(this.cancelUrl, checkoutsessionsCreateSessionRequest.cancelUrl) &&
        Objects.equals(this.mode, checkoutsessionsCreateSessionRequest.mode) &&
        Objects.equals(this.userId, checkoutsessionsCreateSessionRequest.userId) &&
        Objects.equals(this.customerId, checkoutsessionsCreateSessionRequest.customerId) &&
        Objects.equals(this.expiresIn, checkoutsessionsCreateSessionRequest.expiresIn) &&
        Objects.equals(this.metadata, checkoutsessionsCreateSessionRequest.metadata)&&
        Objects.equals(this.additionalProperties, checkoutsessionsCreateSessionRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lineItems, customerEmail, clientReferenceId, successUrl, cancelUrl, mode, userId, customerId, expiresIn, metadata, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutsessionsCreateSessionRequest {\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    customerEmail: ").append(toIndentedString(customerEmail)).append("\n");
    sb.append("    clientReferenceId: ").append(toIndentedString(clientReferenceId)).append("\n");
    sb.append("    successUrl: ").append(toIndentedString(successUrl)).append("\n");
    sb.append("    cancelUrl: ").append(toIndentedString(cancelUrl)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("line_items");
    openapiFields.add("customer_email");
    openapiFields.add("client_reference_id");
    openapiFields.add("success_url");
    openapiFields.add("cancel_url");
    openapiFields.add("mode");
    openapiFields.add("user_id");
    openapiFields.add("customer_id");
    openapiFields.add("expires_in");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("line_items");
    openapiRequiredFields.add("success_url");
    openapiRequiredFields.add("mode");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CheckoutsessionsCreateSessionRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CheckoutsessionsCreateSessionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutsessionsCreateSessionRequest is not found in the empty JSON string", CheckoutsessionsCreateSessionRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckoutsessionsCreateSessionRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("line_items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `line_items` to be an array in the JSON string but got `%s`", jsonObj.get("line_items").toString()));
      }

      JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("line_items");
      // validate the required field `line_items` (array)
      for (int i = 0; i < jsonArraylineItems.size(); i++) {
        CheckoutsessionsCreateSessionRequestLineItemsInner.validateJsonObject(jsonArraylineItems.get(i).getAsJsonObject());
      };
      if ((jsonObj.get("customer_email") != null && !jsonObj.get("customer_email").isJsonNull()) && !jsonObj.get("customer_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_email").toString()));
      }
      if ((jsonObj.get("client_reference_id") != null && !jsonObj.get("client_reference_id").isJsonNull()) && !jsonObj.get("client_reference_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_reference_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_reference_id").toString()));
      }
      if (!jsonObj.get("success_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `success_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("success_url").toString()));
      }
      if ((jsonObj.get("cancel_url") != null && !jsonObj.get("cancel_url").isJsonNull()) && !jsonObj.get("cancel_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancel_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancel_url").toString()));
      }
      if (!jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      if ((jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonNull()) && !jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
      if ((jsonObj.get("customer_id") != null && !jsonObj.get("customer_id").isJsonNull()) && !jsonObj.get("customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutsessionsCreateSessionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutsessionsCreateSessionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutsessionsCreateSessionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutsessionsCreateSessionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutsessionsCreateSessionRequest>() {
           @Override
           public void write(JsonWriter out, CheckoutsessionsCreateSessionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutsessionsCreateSessionRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CheckoutsessionsCreateSessionRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CheckoutsessionsCreateSessionRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CheckoutsessionsCreateSessionRequest
  * @throws IOException if the JSON string is invalid with respect to CheckoutsessionsCreateSessionRequest
  */
  public static CheckoutsessionsCreateSessionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutsessionsCreateSessionRequest.class);
  }

 /**
  * Convert an instance of CheckoutsessionsCreateSessionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

