/*
 * dots api
 * Scalable and Flexible Payouts Infrastructure
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@dots.dev
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UsersAddPayoutMethodRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UsersAddPayoutMethodRequest {
  /**
   * Payout platform to add.
   */
  @JsonAdapter(PlatformEnum.Adapter.class)
 public enum PlatformEnum {
    PAYPAL("paypal"),
    
    VENMO("venmo"),
    
    CASH_APP("cash_app"),
    
    ACH("ach");

    private String value;

    PlatformEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlatformEnum fromValue(String value) {
      for (PlatformEnum b : PlatformEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlatformEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlatformEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlatformEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlatformEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private PlatformEnum platform;

  public static final String SERIALIZED_NAME_ROUTING_NUMBER = "routing_number";
  @SerializedName(SERIALIZED_NAME_ROUTING_NUMBER)
  private String routingNumber;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "account_number";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  /**
   * Bank account type. Required if &#x60;platform&#x60; &#x3D; &#x60;ach&#x60;.
   */
  @JsonAdapter(AccountTypeEnum.Adapter.class)
 public enum AccountTypeEnum {
    CHECKING("checking"),
    
    SAVINGS("savings");

    private String value;

    AccountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccountTypeEnum fromValue(String value) {
      for (AccountTypeEnum b : AccountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccountTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "account_type";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private AccountTypeEnum accountType;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phone_number";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_HANDLE = "handle";
  @SerializedName(SERIALIZED_NAME_HANDLE)
  private String handle;

  public static final String SERIALIZED_NAME_CASH_TAG = "cash_tag";
  @SerializedName(SERIALIZED_NAME_CASH_TAG)
  private String cashTag;

  public UsersAddPayoutMethodRequest() {
  }

  public UsersAddPayoutMethodRequest platform(PlatformEnum platform) {
    
    
    
    
    this.platform = platform;
    return this;
  }

   /**
   * Payout platform to add.
   * @return platform
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Payout platform to add.")

  public PlatformEnum getPlatform() {
    return platform;
  }


  public void setPlatform(PlatformEnum platform) {
    
    
    
    this.platform = platform;
  }


  public UsersAddPayoutMethodRequest routingNumber(String routingNumber) {
    
    
    
    
    this.routingNumber = routingNumber;
    return this;
  }

   /**
   * Bank account or Cash App routing number. Required if &#x60;platform&#x60; &#x3D; &#x60;ach&#x60; or &#x60;cash_app&#x60;.
   * @return routingNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Bank account or Cash App routing number. Required if `platform` = `ach` or `cash_app`.")

  public String getRoutingNumber() {
    return routingNumber;
  }


  public void setRoutingNumber(String routingNumber) {
    
    
    
    this.routingNumber = routingNumber;
  }


  public UsersAddPayoutMethodRequest accountNumber(String accountNumber) {
    
    
    
    
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Bank account or Cash App account number. Required if &#x60;platform&#x60; &#x3D; &#x60;ach&#x60; or &#x60;cash_app&#x60;.
   * @return accountNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Bank account or Cash App account number. Required if `platform` = `ach` or `cash_app`.")

  public String getAccountNumber() {
    return accountNumber;
  }


  public void setAccountNumber(String accountNumber) {
    
    
    
    this.accountNumber = accountNumber;
  }


  public UsersAddPayoutMethodRequest accountType(AccountTypeEnum accountType) {
    
    
    
    
    this.accountType = accountType;
    return this;
  }

   /**
   * Bank account type. Required if &#x60;platform&#x60; &#x3D; &#x60;ach&#x60;.
   * @return accountType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Bank account type. Required if `platform` = `ach`.")

  public AccountTypeEnum getAccountType() {
    return accountType;
  }


  public void setAccountType(AccountTypeEnum accountType) {
    
    
    
    this.accountType = accountType;
  }


  public UsersAddPayoutMethodRequest email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * PayPal email address. Required if &#x60;platform&#x60; &#x3D; &#x60;paypal&#x60;.
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "PayPal email address. Required if `platform` = `paypal`.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public UsersAddPayoutMethodRequest phoneNumber(String phoneNumber) {
    
    
    
    
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * Venmo phone number. One of &#x60;phone_number&#x60; or &#x60;handle&#x60; is required if &#x60;platform&#x60; &#x3D; &#x60;venmo&#x60;.
   * @return phoneNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Venmo phone number. One of `phone_number` or `handle` is required if `platform` = `venmo`.")

  public String getPhoneNumber() {
    return phoneNumber;
  }


  public void setPhoneNumber(String phoneNumber) {
    
    
    
    this.phoneNumber = phoneNumber;
  }


  public UsersAddPayoutMethodRequest handle(String handle) {
    
    
    
    
    this.handle = handle;
    return this;
  }

   /**
   * Venmo handle. One of &#x60;phone_number&#x60; or &#x60;handle&#x60; is required if &#x60;platform&#x60; &#x3D; &#x60;venmo&#x60;.
   * @return handle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Venmo handle. One of `phone_number` or `handle` is required if `platform` = `venmo`.")

  public String getHandle() {
    return handle;
  }


  public void setHandle(String handle) {
    
    
    
    this.handle = handle;
  }


  public UsersAddPayoutMethodRequest cashTag(String cashTag) {
    
    
    
    
    this.cashTag = cashTag;
    return this;
  }

   /**
   * Cash App Cash Tag. Required if &#x60;platform&#x60; &#x3D; &#x60;cash_app&#x60;.
   * @return cashTag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cash App Cash Tag. Required if `platform` = `cash_app`.")

  public String getCashTag() {
    return cashTag;
  }


  public void setCashTag(String cashTag) {
    
    
    
    this.cashTag = cashTag;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UsersAddPayoutMethodRequest instance itself
   */
  public UsersAddPayoutMethodRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsersAddPayoutMethodRequest usersAddPayoutMethodRequest = (UsersAddPayoutMethodRequest) o;
    return Objects.equals(this.platform, usersAddPayoutMethodRequest.platform) &&
        Objects.equals(this.routingNumber, usersAddPayoutMethodRequest.routingNumber) &&
        Objects.equals(this.accountNumber, usersAddPayoutMethodRequest.accountNumber) &&
        Objects.equals(this.accountType, usersAddPayoutMethodRequest.accountType) &&
        Objects.equals(this.email, usersAddPayoutMethodRequest.email) &&
        Objects.equals(this.phoneNumber, usersAddPayoutMethodRequest.phoneNumber) &&
        Objects.equals(this.handle, usersAddPayoutMethodRequest.handle) &&
        Objects.equals(this.cashTag, usersAddPayoutMethodRequest.cashTag)&&
        Objects.equals(this.additionalProperties, usersAddPayoutMethodRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(platform, routingNumber, accountNumber, accountType, email, phoneNumber, handle, cashTag, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsersAddPayoutMethodRequest {\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    handle: ").append(toIndentedString(handle)).append("\n");
    sb.append("    cashTag: ").append(toIndentedString(cashTag)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("platform");
    openapiFields.add("routing_number");
    openapiFields.add("account_number");
    openapiFields.add("account_type");
    openapiFields.add("email");
    openapiFields.add("phone_number");
    openapiFields.add("handle");
    openapiFields.add("cash_tag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("platform");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UsersAddPayoutMethodRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UsersAddPayoutMethodRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsersAddPayoutMethodRequest is not found in the empty JSON string", UsersAddPayoutMethodRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UsersAddPayoutMethodRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      if ((jsonObj.get("routing_number") != null && !jsonObj.get("routing_number").isJsonNull()) && !jsonObj.get("routing_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routing_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routing_number").toString()));
      }
      if ((jsonObj.get("account_number") != null && !jsonObj.get("account_number").isJsonNull()) && !jsonObj.get("account_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_number").toString()));
      }
      if ((jsonObj.get("account_type") != null && !jsonObj.get("account_type").isJsonNull()) && !jsonObj.get("account_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_type").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("phone_number") != null && !jsonObj.get("phone_number").isJsonNull()) && !jsonObj.get("phone_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone_number").toString()));
      }
      if ((jsonObj.get("handle") != null && !jsonObj.get("handle").isJsonNull()) && !jsonObj.get("handle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `handle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("handle").toString()));
      }
      if ((jsonObj.get("cash_tag") != null && !jsonObj.get("cash_tag").isJsonNull()) && !jsonObj.get("cash_tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cash_tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cash_tag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsersAddPayoutMethodRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsersAddPayoutMethodRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsersAddPayoutMethodRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsersAddPayoutMethodRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UsersAddPayoutMethodRequest>() {
           @Override
           public void write(JsonWriter out, UsersAddPayoutMethodRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UsersAddPayoutMethodRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UsersAddPayoutMethodRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UsersAddPayoutMethodRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UsersAddPayoutMethodRequest
  * @throws IOException if the JSON string is invalid with respect to UsersAddPayoutMethodRequest
  */
  public static UsersAddPayoutMethodRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsersAddPayoutMethodRequest.class);
  }

 /**
  * Convert an instance of UsersAddPayoutMethodRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

