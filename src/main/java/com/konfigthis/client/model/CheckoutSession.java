/*
 * dots api
 * Scalable and Flexible Payouts Infrastructure
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@dots.dev
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CheckoutSessionLineItemsInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CheckoutSession
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CheckoutSession {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    OPEN("open"),
    
    COMPLETE("complete"),
    
    EXPIRED("expired");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_PAYMENT_INTENT_ID = "payment_intent_id";
  @SerializedName(SERIALIZED_NAME_PAYMENT_INTENT_ID)
  private UUID paymentIntentId;

  public static final String SERIALIZED_NAME_SUCCESS_URL = "success_url";
  @SerializedName(SERIALIZED_NAME_SUCCESS_URL)
  private URI successUrl;

  public static final String SERIALIZED_NAME_CANCEL_URL = "cancel_url";
  @SerializedName(SERIALIZED_NAME_CANCEL_URL)
  private URI cancelUrl;

  public static final String SERIALIZED_NAME_CHECKOUT_SESSION_URL = "checkout_session_url";
  @SerializedName(SERIALIZED_NAME_CHECKOUT_SESSION_URL)
  private URI checkoutSessionUrl;

  public static final String SERIALIZED_NAME_CLIENT_REFERENCE_ID = "client_reference_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_REFERENCE_ID)
  private String clientReferenceId;

  public static final String SERIALIZED_NAME_EXPIRY = "expiry";
  @SerializedName(SERIALIZED_NAME_EXPIRY)
  private OffsetDateTime expiry;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "line_items";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<CheckoutSessionLineItemsInner> lineItems = null;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private UUID customerId;

  public static final String SERIALIZED_NAME_CUSTOMER_EMAIL = "customer_email";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_EMAIL)
  private String customerEmail;

  public static final String SERIALIZED_NAME_AMOUNT_TOTAL = "amount_total";
  @SerializedName(SERIALIZED_NAME_AMOUNT_TOTAL)
  private Integer amountTotal;

  public CheckoutSession() {
  }

  public CheckoutSession id(UUID id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    
    
    
    this.id = id;
  }


  public CheckoutSession status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public CheckoutSession paymentIntentId(UUID paymentIntentId) {
    
    
    
    
    this.paymentIntentId = paymentIntentId;
    return this;
  }

   /**
   * Get paymentIntentId
   * @return paymentIntentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getPaymentIntentId() {
    return paymentIntentId;
  }


  public void setPaymentIntentId(UUID paymentIntentId) {
    
    
    
    this.paymentIntentId = paymentIntentId;
  }


  public CheckoutSession successUrl(URI successUrl) {
    
    
    
    
    this.successUrl = successUrl;
    return this;
  }

   /**
   * Get successUrl
   * @return successUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public URI getSuccessUrl() {
    return successUrl;
  }


  public void setSuccessUrl(URI successUrl) {
    
    
    
    this.successUrl = successUrl;
  }


  public CheckoutSession cancelUrl(URI cancelUrl) {
    
    
    
    
    this.cancelUrl = cancelUrl;
    return this;
  }

   /**
   * Get cancelUrl
   * @return cancelUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public URI getCancelUrl() {
    return cancelUrl;
  }


  public void setCancelUrl(URI cancelUrl) {
    
    
    
    this.cancelUrl = cancelUrl;
  }


  public CheckoutSession checkoutSessionUrl(URI checkoutSessionUrl) {
    
    
    
    
    this.checkoutSessionUrl = checkoutSessionUrl;
    return this;
  }

   /**
   * Get checkoutSessionUrl
   * @return checkoutSessionUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public URI getCheckoutSessionUrl() {
    return checkoutSessionUrl;
  }


  public void setCheckoutSessionUrl(URI checkoutSessionUrl) {
    
    
    
    this.checkoutSessionUrl = checkoutSessionUrl;
  }


  public CheckoutSession clientReferenceId(String clientReferenceId) {
    
    
    
    
    this.clientReferenceId = clientReferenceId;
    return this;
  }

   /**
   * Get clientReferenceId
   * @return clientReferenceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getClientReferenceId() {
    return clientReferenceId;
  }


  public void setClientReferenceId(String clientReferenceId) {
    
    
    
    this.clientReferenceId = clientReferenceId;
  }


  public CheckoutSession expiry(OffsetDateTime expiry) {
    
    
    
    
    this.expiry = expiry;
    return this;
  }

   /**
   * Get expiry
   * @return expiry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getExpiry() {
    return expiry;
  }


  public void setExpiry(OffsetDateTime expiry) {
    
    
    
    this.expiry = expiry;
  }


  public CheckoutSession metadata(Object metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getMetadata() {
    return metadata;
  }


  public void setMetadata(Object metadata) {
    
    
    
    this.metadata = metadata;
  }


  public CheckoutSession lineItems(List<CheckoutSessionLineItemsInner> lineItems) {
    
    
    
    
    this.lineItems = lineItems;
    return this;
  }

  public CheckoutSession addLineItemsItem(CheckoutSessionLineItemsInner lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

   /**
   * Get lineItems
   * @return lineItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CheckoutSessionLineItemsInner> getLineItems() {
    return lineItems;
  }


  public void setLineItems(List<CheckoutSessionLineItemsInner> lineItems) {
    
    
    
    this.lineItems = lineItems;
  }


  public CheckoutSession created(OffsetDateTime created) {
    
    
    
    
    this.created = created;
    return this;
  }

   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreated() {
    return created;
  }


  public void setCreated(OffsetDateTime created) {
    
    
    
    this.created = created;
  }


  public CheckoutSession updated(OffsetDateTime updated) {
    
    
    
    
    this.updated = updated;
    return this;
  }

   /**
   * Get updated
   * @return updated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getUpdated() {
    return updated;
  }


  public void setUpdated(OffsetDateTime updated) {
    
    
    
    this.updated = updated;
  }


  public CheckoutSession customerId(UUID customerId) {
    
    
    
    
    this.customerId = customerId;
    return this;
  }

   /**
   * &#x60;payment-customer&#x60; ID
   * @return customerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "`payment-customer` ID")

  public UUID getCustomerId() {
    return customerId;
  }


  public void setCustomerId(UUID customerId) {
    
    
    
    this.customerId = customerId;
  }


  public CheckoutSession customerEmail(String customerEmail) {
    
    
    
    
    this.customerEmail = customerEmail;
    return this;
  }

   /**
   * Get customerEmail
   * @return customerEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCustomerEmail() {
    return customerEmail;
  }


  public void setCustomerEmail(String customerEmail) {
    
    
    
    this.customerEmail = customerEmail;
  }


  public CheckoutSession amountTotal(Integer amountTotal) {
    
    
    
    
    this.amountTotal = amountTotal;
    return this;
  }

   /**
   * Get amountTotal
   * @return amountTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getAmountTotal() {
    return amountTotal;
  }


  public void setAmountTotal(Integer amountTotal) {
    
    
    
    this.amountTotal = amountTotal;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CheckoutSession instance itself
   */
  public CheckoutSession putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutSession checkoutSession = (CheckoutSession) o;
    return Objects.equals(this.id, checkoutSession.id) &&
        Objects.equals(this.status, checkoutSession.status) &&
        Objects.equals(this.paymentIntentId, checkoutSession.paymentIntentId) &&
        Objects.equals(this.successUrl, checkoutSession.successUrl) &&
        Objects.equals(this.cancelUrl, checkoutSession.cancelUrl) &&
        Objects.equals(this.checkoutSessionUrl, checkoutSession.checkoutSessionUrl) &&
        Objects.equals(this.clientReferenceId, checkoutSession.clientReferenceId) &&
        Objects.equals(this.expiry, checkoutSession.expiry) &&
        Objects.equals(this.metadata, checkoutSession.metadata) &&
        Objects.equals(this.lineItems, checkoutSession.lineItems) &&
        Objects.equals(this.created, checkoutSession.created) &&
        Objects.equals(this.updated, checkoutSession.updated) &&
        Objects.equals(this.customerId, checkoutSession.customerId) &&
        Objects.equals(this.customerEmail, checkoutSession.customerEmail) &&
        Objects.equals(this.amountTotal, checkoutSession.amountTotal)&&
        Objects.equals(this.additionalProperties, checkoutSession.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, status, paymentIntentId, successUrl, cancelUrl, checkoutSessionUrl, clientReferenceId, expiry, metadata, lineItems, created, updated, customerId, customerEmail, amountTotal, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutSession {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    paymentIntentId: ").append(toIndentedString(paymentIntentId)).append("\n");
    sb.append("    successUrl: ").append(toIndentedString(successUrl)).append("\n");
    sb.append("    cancelUrl: ").append(toIndentedString(cancelUrl)).append("\n");
    sb.append("    checkoutSessionUrl: ").append(toIndentedString(checkoutSessionUrl)).append("\n");
    sb.append("    clientReferenceId: ").append(toIndentedString(clientReferenceId)).append("\n");
    sb.append("    expiry: ").append(toIndentedString(expiry)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    customerEmail: ").append(toIndentedString(customerEmail)).append("\n");
    sb.append("    amountTotal: ").append(toIndentedString(amountTotal)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("status");
    openapiFields.add("payment_intent_id");
    openapiFields.add("success_url");
    openapiFields.add("cancel_url");
    openapiFields.add("checkout_session_url");
    openapiFields.add("client_reference_id");
    openapiFields.add("expiry");
    openapiFields.add("metadata");
    openapiFields.add("line_items");
    openapiFields.add("created");
    openapiFields.add("updated");
    openapiFields.add("customer_id");
    openapiFields.add("customer_email");
    openapiFields.add("amount_total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CheckoutSession
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CheckoutSession.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutSession is not found in the empty JSON string", CheckoutSession.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("payment_intent_id") != null && !jsonObj.get("payment_intent_id").isJsonNull()) && !jsonObj.get("payment_intent_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_intent_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_intent_id").toString()));
      }
      if ((jsonObj.get("success_url") != null && !jsonObj.get("success_url").isJsonNull()) && !jsonObj.get("success_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `success_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("success_url").toString()));
      }
      if ((jsonObj.get("cancel_url") != null && !jsonObj.get("cancel_url").isJsonNull()) && !jsonObj.get("cancel_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancel_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancel_url").toString()));
      }
      if ((jsonObj.get("checkout_session_url") != null && !jsonObj.get("checkout_session_url").isJsonNull()) && !jsonObj.get("checkout_session_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkout_session_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkout_session_url").toString()));
      }
      if ((jsonObj.get("client_reference_id") != null && !jsonObj.get("client_reference_id").isJsonNull()) && !jsonObj.get("client_reference_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_reference_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_reference_id").toString()));
      }
      if (jsonObj.get("line_items") != null && !jsonObj.get("line_items").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("line_items");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("line_items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `line_items` to be an array in the JSON string but got `%s`", jsonObj.get("line_items").toString()));
          }

          // validate the optional field `line_items` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            CheckoutSessionLineItemsInner.validateJsonObject(jsonArraylineItems.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("customer_id") != null && !jsonObj.get("customer_id").isJsonNull()) && !jsonObj.get("customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_id").toString()));
      }
      if ((jsonObj.get("customer_email") != null && !jsonObj.get("customer_email").isJsonNull()) && !jsonObj.get("customer_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_email").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutSession.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutSession' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutSession> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutSession.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutSession>() {
           @Override
           public void write(JsonWriter out, CheckoutSession value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutSession read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CheckoutSession instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CheckoutSession given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CheckoutSession
  * @throws IOException if the JSON string is invalid with respect to CheckoutSession
  */
  public static CheckoutSession fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutSession.class);
  }

 /**
  * Convert an instance of CheckoutSession to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

