/*
 * dots api
 * Scalable and Flexible Payouts Infrastructure
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@dots.dev
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BusinessComplianceInfoCompanyInfo
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BusinessComplianceInfoCompanyInfo {
  public static final String SERIALIZED_NAME_DBA = "dba";
  @SerializedName(SERIALIZED_NAME_DBA)
  private String dba;

  public static final String SERIALIZED_NAME_EIN = "ein";
  @SerializedName(SERIALIZED_NAME_EIN)
  private String ein;

  public static final String SERIALIZED_NAME_INCORPORATION_DATE = "incorporation_date";
  @SerializedName(SERIALIZED_NAME_INCORPORATION_DATE)
  private LocalDate incorporationDate;

  public static final String SERIALIZED_NAME_INCORPORATION_STATE = "incorporation_state";
  @SerializedName(SERIALIZED_NAME_INCORPORATION_STATE)
  private String incorporationState;

  /**
   * The legal classification of the company&#39;s incorporation
   */
  @JsonAdapter(IncorporationTypeEnum.Adapter.class)
 public enum IncorporationTypeEnum {
    SOLE_PROPRIETORSHIP("sole_proprietorship"),
    
    PARTNERSHIP("partnership"),
    
    LLC("llc"),
    
    C_CORPORATION("c_corporation"),
    
    S_CORPORATION("s_corporation");

    private String value;

    IncorporationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IncorporationTypeEnum fromValue(String value) {
      for (IncorporationTypeEnum b : IncorporationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IncorporationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IncorporationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IncorporationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IncorporationTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INCORPORATION_TYPE = "incorporation_type";
  @SerializedName(SERIALIZED_NAME_INCORPORATION_TYPE)
  private IncorporationTypeEnum incorporationType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public BusinessComplianceInfoCompanyInfo() {
  }

  public BusinessComplianceInfoCompanyInfo dba(String dba) {
    
    
    if (dba != null && dba.length() < 1) {
      throw new IllegalArgumentException("Invalid value for dba. Length must be greater than or equal to 1.");
    }
    
    this.dba = dba;
    return this;
  }

   /**
   * Company DBA (Doing Business As)
   * @return dba
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Company DBA (Doing Business As)")

  public String getDba() {
    return dba;
  }


  public void setDba(String dba) {
    
    
    if (dba != null && dba.length() < 1) {
      throw new IllegalArgumentException("Invalid value for dba. Length must be greater than or equal to 1.");
    }
    this.dba = dba;
  }


  public BusinessComplianceInfoCompanyInfo ein(String ein) {
    
    
    
    
    this.ein = ein;
    return this;
  }

   /**
   * Federal Employer Identification Number
   * @return ein
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Federal Employer Identification Number")

  public String getEin() {
    return ein;
  }


  public void setEin(String ein) {
    
    
    
    this.ein = ein;
  }


  public BusinessComplianceInfoCompanyInfo incorporationDate(LocalDate incorporationDate) {
    
    
    
    
    this.incorporationDate = incorporationDate;
    return this;
  }

   /**
   * Date of incorporation
   * @return incorporationDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Date of incorporation")

  public LocalDate getIncorporationDate() {
    return incorporationDate;
  }


  public void setIncorporationDate(LocalDate incorporationDate) {
    
    
    
    this.incorporationDate = incorporationDate;
  }


  public BusinessComplianceInfoCompanyInfo incorporationState(String incorporationState) {
    
    
    
    
    this.incorporationState = incorporationState;
    return this;
  }

   /**
   * State where incorporated
   * @return incorporationState
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "State where incorporated")

  public String getIncorporationState() {
    return incorporationState;
  }


  public void setIncorporationState(String incorporationState) {
    
    
    
    this.incorporationState = incorporationState;
  }


  public BusinessComplianceInfoCompanyInfo incorporationType(IncorporationTypeEnum incorporationType) {
    
    
    
    
    this.incorporationType = incorporationType;
    return this;
  }

   /**
   * The legal classification of the company&#39;s incorporation
   * @return incorporationType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The legal classification of the company's incorporation")

  public IncorporationTypeEnum getIncorporationType() {
    return incorporationType;
  }


  public void setIncorporationType(IncorporationTypeEnum incorporationType) {
    
    
    
    this.incorporationType = incorporationType;
  }


  public BusinessComplianceInfoCompanyInfo name(String name) {
    
    
    if (name != null && name.length() < 3) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 3.");
    }
    
    this.name = name;
    return this;
  }

   /**
   * Company&#39;s legal name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Company's legal name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    if (name != null && name.length() < 3) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 3.");
    }
    this.name = name;
  }


  public BusinessComplianceInfoCompanyInfo website(String website) {
    
    
    if (website != null && website.length() < 3) {
      throw new IllegalArgumentException("Invalid value for website. Length must be greater than or equal to 3.");
    }
    
    this.website = website;
    return this;
  }

   /**
   * Company web address
   * @return website
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Company web address")

  public String getWebsite() {
    return website;
  }


  public void setWebsite(String website) {
    
    
    if (website != null && website.length() < 3) {
      throw new IllegalArgumentException("Invalid value for website. Length must be greater than or equal to 3.");
    }
    this.website = website;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BusinessComplianceInfoCompanyInfo instance itself
   */
  public BusinessComplianceInfoCompanyInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BusinessComplianceInfoCompanyInfo businessComplianceInfoCompanyInfo = (BusinessComplianceInfoCompanyInfo) o;
    return Objects.equals(this.dba, businessComplianceInfoCompanyInfo.dba) &&
        Objects.equals(this.ein, businessComplianceInfoCompanyInfo.ein) &&
        Objects.equals(this.incorporationDate, businessComplianceInfoCompanyInfo.incorporationDate) &&
        Objects.equals(this.incorporationState, businessComplianceInfoCompanyInfo.incorporationState) &&
        Objects.equals(this.incorporationType, businessComplianceInfoCompanyInfo.incorporationType) &&
        Objects.equals(this.name, businessComplianceInfoCompanyInfo.name) &&
        Objects.equals(this.website, businessComplianceInfoCompanyInfo.website)&&
        Objects.equals(this.additionalProperties, businessComplianceInfoCompanyInfo.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dba, ein, incorporationDate, incorporationState, incorporationType, name, website, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessComplianceInfoCompanyInfo {\n");
    sb.append("    dba: ").append(toIndentedString(dba)).append("\n");
    sb.append("    ein: ").append(toIndentedString(ein)).append("\n");
    sb.append("    incorporationDate: ").append(toIndentedString(incorporationDate)).append("\n");
    sb.append("    incorporationState: ").append(toIndentedString(incorporationState)).append("\n");
    sb.append("    incorporationType: ").append(toIndentedString(incorporationType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dba");
    openapiFields.add("ein");
    openapiFields.add("incorporation_date");
    openapiFields.add("incorporation_state");
    openapiFields.add("incorporation_type");
    openapiFields.add("name");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ein");
    openapiRequiredFields.add("incorporation_date");
    openapiRequiredFields.add("incorporation_state");
    openapiRequiredFields.add("incorporation_type");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("website");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BusinessComplianceInfoCompanyInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BusinessComplianceInfoCompanyInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BusinessComplianceInfoCompanyInfo is not found in the empty JSON string", BusinessComplianceInfoCompanyInfo.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BusinessComplianceInfoCompanyInfo.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("dba") != null && !jsonObj.get("dba").isJsonNull()) && !jsonObj.get("dba").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dba` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dba").toString()));
      }
      if (!jsonObj.get("ein").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ein` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ein").toString()));
      }
      if (!jsonObj.get("incorporation_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incorporation_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incorporation_state").toString()));
      }
      if (!jsonObj.get("incorporation_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incorporation_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incorporation_type").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BusinessComplianceInfoCompanyInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BusinessComplianceInfoCompanyInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BusinessComplianceInfoCompanyInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BusinessComplianceInfoCompanyInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BusinessComplianceInfoCompanyInfo>() {
           @Override
           public void write(JsonWriter out, BusinessComplianceInfoCompanyInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BusinessComplianceInfoCompanyInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BusinessComplianceInfoCompanyInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BusinessComplianceInfoCompanyInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BusinessComplianceInfoCompanyInfo
  * @throws IOException if the JSON string is invalid with respect to BusinessComplianceInfoCompanyInfo
  */
  public static BusinessComplianceInfoCompanyInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BusinessComplianceInfoCompanyInfo.class);
  }

 /**
  * Convert an instance of BusinessComplianceInfoCompanyInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

