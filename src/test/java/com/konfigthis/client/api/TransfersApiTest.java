/*
 * dots api
 * Scalable and Flexible Payouts Infrastructure
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@dots.dev
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Transfer;
import com.konfigthis.client.model.TransfersCreateOrganizationTransferRequest;
import com.konfigthis.client.model.TransfersCreateTransferRequest;
import com.konfigthis.client.model.TransfersGetAllResponse;
import com.konfigthis.client.model.TransfersListAllResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransfersApi
 */
@Disabled
public class TransfersApiTest {

    private static TransfersApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TransfersApi(apiClient);
    }

    /**
     * Create an Organization Transfer
     *
     * Create a transfer for the organization&#39;s wallet to an api app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationTransferTest() throws ApiException {
        Integer amount = null;
        UUID apiAppId = null;
        UUID idempotencyKey = null;
        Object metadata = null;
        Transfer response = api.createOrganizationTransfer(amount, apiAppId)
                .idempotencyKey(idempotencyKey)
                .metadata(metadata)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a Transfer
     *
     * Create a transfer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTransferTest() throws ApiException {
        Integer amount = null;
        UUID userId = null;
        Object taxExempt = null;
        Object idempotencyKey = null;
        Object metadata = null;
        Transfer response = api.createTransfer(amount, userId)
                .taxExempt(taxExempt)
                .idempotencyKey(idempotencyKey)
                .metadata(metadata)
                .execute();
        // TODO: test validations
    }

    /**
     * List all Organization Transfers
     *
     * List all transfers to and from an Organization&#39;s wallet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTest() throws ApiException {
        Integer limit = null;
        UUID startingAfter = null;
        UUID endingBefore = null;
        UUID userId = null;
        TransfersGetAllResponse response = api.getAll()
                .limit(limit)
                .startingAfter(startingAfter)
                .endingBefore(endingBefore)
                .userId(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a Transfer
     *
     * Get a transfer by its id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        UUID transferId = null;
        Transfer response = api.getById(transferId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a Transfer
     *
     * Get a transfer by its id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getById_0Test() throws ApiException {
        String transferId = null;
        Transfer response = api.getById_0(transferId)
                .execute();
        // TODO: test validations
    }

    /**
     * List all Transfers
     *
     * List all transfers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllTest() throws ApiException {
        Integer limit = null;
        UUID startingAfter = null;
        UUID endingBefore = null;
        UUID userId = null;
        TransfersListAllResponse response = api.listAll()
                .limit(limit)
                .startingAfter(startingAfter)
                .endingBefore(endingBefore)
                .userId(userId)
                .execute();
        // TODO: test validations
    }

}
