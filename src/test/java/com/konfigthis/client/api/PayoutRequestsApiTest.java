/*
 * dots api
 * Scalable and Flexible Payouts Infrastructure
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@dots.dev
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.PayoutRequest;
import com.konfigthis.client.model.PayoutrequestsGetAllPayoutsResponse;
import com.konfigthis.client.model.PayoutrequestsSubmitRequestRequest;
import com.konfigthis.client.model.PayoutsSendPayoutRequestPayee;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PayoutRequestsApi
 */
@Disabled
public class PayoutRequestsApiTest {

    private static PayoutRequestsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PayoutRequestsApi(apiClient);
    }

    /**
     * List all Payout Requests
     *
     * List all payout requests.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPayoutsTest() throws ApiException {
        Integer limit = null;
        UUID startingAfter = null;
        UUID endingBefore = null;
        PayoutrequestsGetAllPayoutsResponse response = api.getAllPayouts()
                .limit(limit)
                .startingAfter(startingAfter)
                .endingBefore(endingBefore)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a Payout Request
     *
     * Get a payout request by its id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayoutByIdTest() throws ApiException {
        String payoutRequestId = null;
        PayoutRequest response = api.getPayoutById(payoutRequestId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a Payout Request
     *
     * Submit a payout request from a person when you know their phone number or user id. Once the payout request is approved, they will be sent a Payout Link to onboard and recieve funds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitRequestTest() throws ApiException {
        Integer amount = null;
        UUID userId = null;
        PayoutsSendPayoutRequestPayee payee = null;
        Object metadata = null;
        String memo = null;
        PayoutRequest response = api.submitRequest(amount)
                .userId(userId)
                .payee(payee)
                .metadata(metadata)
                .memo(memo)
                .execute();
        // TODO: test validations
    }

}
