/*
 * dots api
 * Scalable and Flexible Payouts Infrastructure
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@dots.dev
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.PaymentMethod;
import java.util.UUID;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.UsersAddPayoutMethodRequest;
import com.konfigthis.client.model.UsersCreateNewUserRequest;
import com.konfigthis.client.model.UsersListAllUsersResponse;
import com.konfigthis.client.model.UsersSendVerificationTokenRequest;
import com.konfigthis.client.model.UsersSubmitComplianceInfoRequest;
import com.konfigthis.client.model.UsersSubmitComplianceInfoRequestW8ben;
import com.konfigthis.client.model.UsersSubmitComplianceInfoRequestW9;
import com.konfigthis.client.model.UsersUpdateUserObjectRequest;
import com.konfigthis.client.model.UsersVerifyUserTokenRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private static UsersApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new UsersApi(apiClient);
    }

    /**
     * Add a Payout Method
     *
     * Add a payout method to the user. Payout method can be one of &#x60;paypal&#x60;, &#x60;venmo&#x60;, &#x60;ach&#x60;, or &#x60;cash_app&#x60;. Each method has different required parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPayoutMethodTest() throws ApiException {
        String platform = null;
        UUID userId = null;
        String routingNumber = null;
        String accountNumber = null;
        String accountType = null;
        String email = null;
        String phoneNumber = null;
        String handle = null;
        String cashTag = null;
        PaymentMethod response = api.addPayoutMethod(platform, userId)
                .routingNumber(routingNumber)
                .accountNumber(accountNumber)
                .accountType(accountType)
                .email(email)
                .phoneNumber(phoneNumber)
                .handle(handle)
                .cashTag(cashTag)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a User
     *
     * Create a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewUserTest() throws ApiException {
        String firstName = null;
        String lastName = null;
        String email = null;
        String countryCode = null;
        String phoneNumber = null;
        String username = null;
        Object metadata = null;
        User response = api.createNewUser(firstName, lastName, email, countryCode, phoneNumber)
                .username(username)
                .metadata(metadata)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a User
     *
     * Get a user by their id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserByIdTest() throws ApiException {
        UUID userId = null;
        User response = api.getUserById(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * List all Users
     *
     * List all users connected to your application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllUsersTest() throws ApiException {
        UUID startingAfter = null;
        Integer limit = null;
        UUID endingBefore = null;
        UsersListAllUsersResponse response = api.listAllUsers()
                .startingAfter(startingAfter)
                .limit(limit)
                .endingBefore(endingBefore)
                .execute();
        // TODO: test validations
    }

    /**
     * List Payout Methods
     *
     * Get a user&#39;s connected payout methods.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPayoutMethodsTest() throws ApiException {
        UUID userId = null;
        List<PaymentMethod> response = api.listPayoutMethods(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a User
     *
     * Delete a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeUserTest() throws ApiException {
        UUID userId = null;
        User response = api.removeUser(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Send a Verification Token
     *
     * Send a user a verification token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendVerificationTokenTest() throws ApiException {
        String userId = null;
        Boolean useVoice = null;
        api.sendVerificationToken(userId)
                .useVoice(useVoice)
                .execute();
        // TODO: test validations
    }

    /**
     * Submit Compliance Information
     *
     * Add Compliance information to a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitComplianceInfoTest() throws ApiException {
        String userId = null;
        UsersSubmitComplianceInfoRequestW9 w9 = null;
        UsersSubmitComplianceInfoRequestW8ben w8ben = null;
        api.submitComplianceInfo(userId)
                .w9(w9)
                .w8ben(w8ben)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a user
     *
     * Update mutable fields of a user object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserObjectTest() throws ApiException {
        UUID userId = null;
        String defaultPayoutMethod = null;
        Boolean autoPayoutEnabled = null;
        Object metadata = null;
        User response = api.updateUserObject(userId)
                .defaultPayoutMethod(defaultPayoutMethod)
                .autoPayoutEnabled(autoPayoutEnabled)
                .metadata(metadata)
                .execute();
        // TODO: test validations
    }

    /**
     * Verify a User
     *
     * Verify a user with a token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyUserTokenTest() throws ApiException {
        String token = null;
        UUID userId = null;
        api.verifyUserToken(token, userId)
                .execute();
        // TODO: test validations
    }

}
