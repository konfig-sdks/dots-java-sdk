/*
 * dots api
 * Scalable and Flexible Payouts Infrastructure
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@dots.dev
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.PayoutLink;
import com.konfigthis.client.model.PayoutsCreatePayoutRequest;
import com.konfigthis.client.model.PayoutsSendPayoutRequest;
import com.konfigthis.client.model.PayoutsSendPayoutRequestDelivery;
import com.konfigthis.client.model.PayoutsSendPayoutRequestPayee;
import com.konfigthis.client.model.Transfer;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PayoutsApi
 */
@Disabled
public class PayoutsApiTest {

    private static PayoutsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PayoutsApi(apiClient);
    }

    /**
     * Create a Payout
     *
     * Create a payout for an existing user that has a payout method saved to their account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPayoutTest() throws ApiException {
        UUID userId = null;
        Integer amount = null;
        String platform = null;
        String accountId = null;
        Boolean fund = null;
        UUID idempotencyKey = null;
        Object metadata = null;
        Transfer response = api.createPayout(userId, amount, platform)
                .accountId(accountId)
                .fund(fund)
                .idempotencyKey(idempotencyKey)
                .metadata(metadata)
                .execute();
        // TODO: test validations
    }

    /**
     * Send a Payout
     *
     * Send a payout to a person when you know their phone number or user id. If the user has a Dots acconut, the funds will delivered according to their saved prefernces. Otherwise, they will be sent a Payout Link to onboard and recieve funds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendPayoutTest() throws ApiException {
        Integer amount = null;
        UUID userId = null;
        PayoutsSendPayoutRequestPayee payee = null;
        PayoutsSendPayoutRequestDelivery delivery = null;
        Boolean forceCollectComplianceInformation = null;
        List<String> additionalSteps = null;
        Boolean taxExempt = null;
        Object metadata = null;
        String memo = null;
        Object idempotencyKey = null;
        UUID payoutFeeParty = null;
        PayoutLink response = api.sendPayout(amount)
                .userId(userId)
                .payee(payee)
                .delivery(delivery)
                .forceCollectComplianceInformation(forceCollectComplianceInformation)
                .additionalSteps(additionalSteps)
                .taxExempt(taxExempt)
                .metadata(metadata)
                .memo(memo)
                .idempotencyKey(idempotencyKey)
                .payoutFeeParty(payoutFeeParty)
                .execute();
        // TODO: test validations
    }

}
